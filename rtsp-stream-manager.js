/**
 * RTSP Stream Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞–º–∏ —á–µ—Ä–µ–∑ FFmpeg —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—É–¥–∏–æ
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è
 */

import { spawn } from 'child_process';
import { EventEmitter } from 'events';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class RTSPStreamManager extends EventEmitter {
    constructor() {
        super();
        this.activeStreams = new Map(); // –ê–∫—Ç–∏–≤–Ω—ã–µ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å—ã
        this.streamBuffer = new Map(); // –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        this.connectionAttempts = new Map(); // –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.reconnectTimers = new Map(); // –¢–∞–π–º–µ—Ä—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.audioStreams = new Map(); // –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫–∏
        this.currentAudioStream = null; // –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫ (—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.config = {
            maxRetries: 5,
            retryInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            connectionTimeout: 15000, // 15 —Å–µ–∫—É–Ω–¥
            bufferSize: 1024 * 1024, // 1MB –±—É—Ñ–µ—Ä
            outputDir: './stream_output',
            audioOutputDir: './audio_output',
            ffmpegPath: 'ffmpeg', // –ü—É—Ç—å –∫ FFmpeg
            audioCodecs: ['aac', 'pcm_mulaw', 'pcm_alaw'], // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞—É–¥–∏–æ –∫–æ–¥–µ–∫–∏
            videoCodecs: ['h264', 'h265', 'mjpeg'] // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∏–¥–µ–æ –∫–æ–¥–µ–∫–∏
        };
        
        this.ensureOutputDirectories();
        console.log('üé• RTSP Stream Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—É–¥–∏–æ');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
     */
    ensureOutputDirectories() {
        [this.config.outputDir, this.config.audioOutputDir].forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
                console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
            }
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ FFmpeg
     */
    async checkFFmpegAvailability() {
        return new Promise((resolve) => {
            const process = spawn(this.config.ffmpegPath, ['-version']);
            
            process.on('close', (code) => {
                if (code === 0) {
                    console.log('‚úÖ FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω');
                    resolve(true);
                } else {
                    console.log('‚ùå FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                    resolve(false);
                }
            });

            process.on('error', () => {
                console.log('‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
                resolve(false);
            });
        });
    }

    /**
     * –ó–∞–ø—É—Å–∫ RTSP –ø–æ—Ç–æ–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
     * @param {Object} camera - –û–±—ä–µ–∫—Ç –∫–∞–º–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * @param {string} quality - 'low' (480p) –∏–ª–∏ 'high' (1080p)
     * @param {boolean} includeAudio - –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
     */
    async startStream(camera, quality = 'low', includeAudio = false) {
        const streamId = `${camera.id}_${quality}`;
        
        try {
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.activeStreams.has(streamId)) {
                await this.stopStream(streamId);
            }

            // –ê–Ω–∞–ª–∏–∑ RTSP URL –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–¥–µ–∫–æ–≤
            await this.analyzeRTSPStream(camera.rtsp_link);

            // –í—ã–±–æ—Ä RTSP URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞
            const rtspUrl = quality === 'high' ? 
                (camera.rtsp_link_high || camera.rtsp_link) : 
                camera.rtsp_link;

            console.log(`üé¨ –ó–∞–ø—É—Å–∫ ${quality} –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${camera.camera_name}...`);

            // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ—Ç–æ–∫–∞
            const streamData = {
                id: streamId,
                camera: camera,
                quality: quality,
                rtspUrl: rtspUrl,
                status: 'connecting',
                process: null,
                audioProcess: null,
                startTime: Date.now(),
                includeAudio: includeAudio
            };

            // –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞
            const videoProcess = await this.startVideoProcess(streamData);
            streamData.process = videoProcess;

            // –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if (includeAudio) {
                const audioProcess = await this.startAudioProcess(streamData);
                streamData.audioProcess = audioProcess;
            }

            this.activeStreams.set(streamId, streamData);
            this.connectionAttempts.set(streamId, 0);

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            this.setupFFmpegHandlers(streamId, videoProcess, camera);
            
            if (streamData.audioProcess) {
                this.setupAudioHandlers(streamId, streamData.audioProcess, camera);
            }

            return streamId;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ ${camera.camera_name}:`, error.message);
            this.handleStreamError(streamId, camera, error);
            throw error;
        }
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ RTSP –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–¥–µ–∫–æ–≤
     */
    async analyzeRTSPStream(rtspUrl) {
        return new Promise((resolve, reject) => {
            const analyzeArgs = [
                '-i', rtspUrl,
                '-t', '1',
                '-f', 'null',
                '-'
            ];

            const analyzeProcess = spawn(this.config.ffmpegPath, analyzeArgs);
            let stderr = '';

            analyzeProcess.stderr.on('data', (data) => {
                stderr += data.toString();
            });

            analyzeProcess.on('close', (code) => {
                // –ê–Ω–∞–ª–∏–∑ –≤—ã–≤–æ–¥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–µ–∫–æ–≤
                const hasVideo = stderr.includes('Video:');
                const hasAudio = stderr.includes('Audio:');
                const videoCodec = this.extractCodec(stderr, 'Video');
                const audioCodec = this.extractCodec(stderr, 'Audio');

                console.log(`üîç –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–æ–∫–∞: –≤–∏–¥–µ–æ=${hasVideo}(${videoCodec}), –∞—É–¥–∏–æ=${hasAudio}(${audioCodec})`);
                resolve({ hasVideo, hasAudio, videoCodec, audioCodec });
            });

            analyzeProcess.on('error', (error) => {
                console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫: ${error.message}`);
                resolve({ hasVideo: true, hasAudio: false }); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É
            });

            // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            setTimeout(() => {
                analyzeProcess.kill('SIGTERM');
                resolve({ hasVideo: true, hasAudio: false });
            }, 5000);
        });
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–¥–µ–∫–µ –∏–∑ –≤—ã–≤–æ–¥–∞ FFmpeg
     */
    extractCodec(stderr, streamType) {
        const regex = new RegExp(`${streamType}:\\s*([^\\s,]+)`, 'i');
        const match = stderr.match(regex);
        return match ? match[1].toLowerCase() : 'unknown';
    }

    /**
     * –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ FFmpeg
     */
    async startVideoProcess(streamData) {
        const outputPath = path.join(this.config.outputDir, `${streamData.id}.m3u8`);
        const ffmpegArgs = this.buildVideoFFmpegArgs(streamData.rtspUrl, outputPath, streamData.quality);
        
        console.log(`üöÄ –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ FFmpeg: ${this.config.ffmpegPath} ${ffmpegArgs.join(' ')}`);
        
        const process = spawn(this.config.ffmpegPath, ffmpegArgs);
        
        return process;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ FFmpeg
     */
    async startAudioProcess(streamData) {
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ (—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å)
        if (this.currentAudioStream && this.currentAudioStream !== streamData.id) {
            await this.stopAudioStream(this.currentAudioStream);
        }

        const audioOutputPath = path.join(this.config.audioOutputDir, `${streamData.id}_audio.m3u8`);
        const audioArgs = this.buildAudioFFmpegArgs(streamData.rtspUrl, audioOutputPath);
        
        console.log(`üîä –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ FFmpeg: ${this.config.ffmpegPath} ${audioArgs.join(' ')}`);
        
        const audioProcess = spawn(this.config.ffmpegPath, audioArgs);
        this.currentAudioStream = streamData.id;
        this.audioStreams.set(streamData.id, audioProcess);
        
        return audioProcess;
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞—É–¥–∏–æ FFmpeg
     */
    buildAudioFFmpegArgs(rtspUrl, outputPath) {
        return [
            '-i', rtspUrl,
            '-timeout', '10000000',
            '-fflags', '+genpts',
            '-avoid_negative_ts', 'make_zero',
            
            // –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ
            '-vn',
            '-c:a', 'aac',
            '-ar', '44100',
            '-ac', '2',
            '-b:a', '128k',
            
            // HLS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞—É–¥–∏–æ
            '-f', 'hls',
            '-hls_time', '2',
            '-hls_list_size', '3',
            '-hls_flags', 'delete_segments+independent_segments',
            '-hls_segment_filename', path.join(this.config.audioOutputDir, `${path.basename(outputPath, '.m3u8')}_audio_%03d.ts`),
            outputPath
        ];
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ FFmpeg –¥–ª—è –≤–∏–¥–µ–æ
     */
    buildVideoFFmpegArgs(rtspUrl, outputPath, quality) {
        const streamId = path.basename(outputPath, '.m3u8');
        
        const baseArgs = [
            '-i', rtspUrl,
            '-timeout', '10000000',
            '-fflags', '+genpts',
            '-avoid_negative_ts', 'make_zero',
            '-reconnect', '1',
            '-reconnect_streamed', '1',
            '-reconnect_delay_max', '2'
        ];

        const qualityArgs = quality === 'high' ? [
            // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (1080p)
            '-c:v', 'libx264',
            '-preset', 'ultrafast',
            '-tune', 'zerolatency',
            '-s', '1920x1080',
            '-r', '25',
            '-b:v', '4M',
            '-maxrate', '4M',
            '-bufsize', '8M',
            // –£–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞
            '-an'
        ] : [
            // –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (480p)
            '-c:v', 'libx264',
            '-preset', 'ultrafast',
            '-tune', 'zerolatency',
            '-s', '640x480',
            '-r', '15',
            '-b:v', '1M',
            '-maxrate', '1M',
            '-bufsize', '2M',
            // –£–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–∞
            '-an'
        ];

        const hlsArgs = [
            // HLS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            '-f', 'hls',
            '-hls_time', '2',
            '-hls_list_size', '3',
            '-hls_flags', 'delete_segments+independent_segments',
            '-hls_segment_filename', path.join(this.config.outputDir, `${streamId}_%03d.ts`),
            outputPath
        ];

        return [...baseArgs, ...qualityArgs, ...hlsArgs];
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π FFmpeg –¥–ª—è –≤–∏–¥–µ–æ
     */
    setupFFmpegHandlers(streamId, ffmpegProcess, camera) {
        const streamData = this.activeStreams.get(streamId);

        ffmpegProcess.stderr.on('data', (data) => {
            const output = data.toString();
            
            // –ü–æ–∏—Å–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (output.includes('fps=') || output.includes('bitrate=')) {
                if (streamData.status === 'connecting') {
                    console.log(`‚úÖ –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${camera.camera_name}`);
                    streamData.status = 'streaming';
                    this.emit('streamConnected', { streamId, camera, type: 'video' });
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if (output.includes('Connection refused') || 
                output.includes('Connection timed out') ||
                output.includes('No route to host')) {
                this.handleStreamError(streamId, camera, new Error(output));
            }
        });

        ffmpegProcess.on('error', (error) => {
            console.error(`üí• FFmpeg –ø—Ä–æ—Ü–µ—Å—Å –æ—à–∏–±–∫–∞:`, error);
            this.handleStreamError(streamId, camera, error);
        });

        ffmpegProcess.on('close', (code) => {
            console.log(`üîå FFmpeg –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω (–∫–æ–¥ ${code}): ${camera.camera_name}`);
            if (code !== 0 && streamData.status === 'streaming') {
                this.handleStreamError(streamId, camera, new Error(`FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`));
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
     */
    setupAudioHandlers(streamId, audioProcess, camera) {
        audioProcess.stderr.on('data', (data) => {
            const output = data.toString();
            
            if (output.includes('fps=') || output.includes('size=')) {
                console.log(`üîä –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω: ${camera.camera_name}`);
                this.emit('audioStreamConnected', { streamId, camera });
            }
        });

        audioProcess.on('error', (error) => {
            console.error(`üí• –ê—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å –æ—à–∏–±–∫–∞:`, error);
            this.emit('audioStreamError', { streamId, camera, error });
        });

        audioProcess.on('close', (code) => {
            console.log(`üîá –ê—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω (–∫–æ–¥ ${code}): ${camera.camera_name}`);
            this.audioStreams.delete(streamId);
            if (this.currentAudioStream === streamId) {
                this.currentAudioStream = null;
            }
        });
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ - –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–µ—Ä—ã
     */
    async toggleAudio(cameraId, quality = 'low') {
        const streamId = `${cameraId}_${quality}`;
        const streamData = this.activeStreams.get(streamId);
        
        if (!streamData) {
            throw new Error(`–ü–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${streamId}`);
        }

        // –ï—Å–ª–∏ –∞—É–¥–∏–æ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ –¥–ª—è —ç—Ç–æ–π –∫–∞–º–µ—Ä—ã - –≤—ã–∫–ª—é—á–∞–µ–º
        if (this.currentAudioStream === streamId) {
            await this.stopAudioStream(streamId);
            console.log(`üîá –ê—É–¥–∏–æ –≤—ã–∫–ª—é—á–µ–Ω–æ: ${streamData.camera.camera_name}`);
            this.emit('audioStopped', { streamId, camera: streamData.camera });
            return false;
        }

        // –í–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞–º–µ—Ä—ã
        try {
            const audioProcess = await this.startAudioProcess(streamData);
            streamData.audioProcess = audioProcess;
            this.setupAudioHandlers(streamId, audioProcess, streamData.camera);
            
            console.log(`üîä –ê—É–¥–∏–æ –≤–∫–ª—é—á–µ–Ω–æ: ${streamData.camera.camera_name}`);
            this.emit('audioStarted', { streamId, camera: streamData.camera });
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ:`, error);
            this.emit('audioError', { streamId, camera: streamData.camera, error });
            return false;
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
     */
    async stopAudioStream(streamId) {
        const audioProcess = this.audioStreams.get(streamId);
        if (audioProcess) {
            audioProcess.kill('SIGTERM');
            this.audioStreams.delete(streamId);
        }

        if (this.currentAudioStream === streamId) {
            this.currentAudioStream = null;
        }

        // –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        try {
            const audioFiles = fs.readdirSync(this.config.audioOutputDir)
                .filter(file => file.startsWith(streamId));
            
            audioFiles.forEach(file => {
                fs.unlinkSync(path.join(this.config.audioOutputDir, file));
            });
        } catch (error) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã:`, error.message);
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞
     */
    async stopStream(streamId) {
        const streamData = this.activeStreams.get(streamId);
        
        if (streamData) {
            console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞: ${streamData.camera.camera_name}`);
            
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–µ–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            if (streamData.process) {
                streamData.process.kill('SIGTERM');
            }

            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            if (streamData.audioProcess) {
                await this.stopAudioStream(streamId);
            }

            this.activeStreams.delete(streamId);
            this.connectionAttempts.delete(streamId);
            
            // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (this.reconnectTimers.has(streamId)) {
                clearTimeout(this.reconnectTimers.get(streamId));
                this.reconnectTimers.delete(streamId);
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            this.cleanupStreamFiles(streamId);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
     */
    getStreamStatus() {
        const streams = {};
        
        for (const [streamId, streamData] of this.activeStreams) {
            streams[streamId] = {
                camera: streamData.camera,
                quality: streamData.quality,
                status: streamData.status,
                uptime: Date.now() - streamData.startTime,
                hasAudio: !!streamData.audioProcess,
                isCurrentAudio: this.currentAudioStream === streamId
            };
        }

        return {
            totalStreams: this.activeStreams.size,
            audioStreams: this.audioStreams.size,
            currentAudioStream: this.currentAudioStream,
            streams: streams
        };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ—Ç–æ–∫–∞
     */
    handleStreamError(streamId, camera, error) {
        const attempts = (this.connectionAttempts.get(streamId) || 0) + 1;
        this.connectionAttempts.set(streamId, attempts);

        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞ ${camera.camera_name}: ${error.message} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${this.config.maxRetries})`);
        this.emit('streamError', { streamId, camera, error, attempts });

        if (attempts >= this.config.maxRetries) {
            console.error(`üíÄ –ü–æ—Ç–æ–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${camera.camera_name}`);
            this.emit('streamFailed', { streamId, camera });
            this.stopStream(streamId);
        } else {
            // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            const timer = setTimeout(() => {
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${attempts + 1}: ${camera.camera_name}`);
                this.startStream(camera, streamData?.quality || 'low');
            }, this.config.retryInterval);
            
            this.reconnectTimers.set(streamId, timer);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ—Ç–æ–∫–∞
     */
    cleanupStreamFiles(streamId) {
        try {
            // –û—á–∏—Å—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
            const videoFiles = fs.readdirSync(this.config.outputDir)
                .filter(file => file.startsWith(streamId));
            
            videoFiles.forEach(file => {
                fs.unlinkSync(path.join(this.config.outputDir, file));
            });

            // –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
            const audioFiles = fs.readdirSync(this.config.audioOutputDir)
                .filter(file => file.startsWith(streamId));
            
            audioFiles.forEach(file => {
                fs.unlinkSync(path.join(this.config.audioOutputDir, file));
            });

        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è ${streamId}:`, error.message);
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
     */
    async stopAllStreams() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤...');
        const stopPromises = Array.from(this.activeStreams.keys()).map(streamId => 
            this.stopStream(streamId)
        );
        
        await Promise.all(stopPromises);
        console.log('‚úÖ –í—Å–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
}

export default RTSPStreamManager;
