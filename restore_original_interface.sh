#!/bin/bash

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
# –°–∏—Å—Ç–µ–º–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–º–µ—Ä –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º

set -e

GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_step() { echo -e "${BLUE}üîß $1${NC}"; }

echo "üè† –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
echo "=================================================================="

cd rtsp-monitor-electron

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
log_step "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."

# –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º backup
if [ -f "index.html.backup" ]; then
    cp index.html.backup index.html
    log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ backup —Ñ–∞–π–ª–∞"
else
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"
    
    cat > index.html << 'EOF'
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            overflow: hidden;
            user-select: none;
        }

        .container {
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* –≠–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */
        .login-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .login-card {
            background: rgba(255,255,255,0.1);
            padding: 40px;
            border-radius: 20px;
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255,255,255,0.2);
            min-width: 400px;
            text-align: center;
        }

        .login-title {
            font-size: 2em;
            margin-bottom: 30px;
            color: white;
        }

        .form-group {
            margin-bottom: 20px;
            text-align: left;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #ecf0f1;
        }

        .form-group input {
            width: 100%;
            padding: 12px;
            border: 1px solid rgba(255,255,255,0.3);
            border-radius: 8px;
            background: rgba(255,255,255,0.1);
            color: white;
            font-size: 16px;
        }

        .form-group input::placeholder {
            color: rgba(255,255,255,0.7);
        }

        .login-btn {
            width: 100%;
            padding: 15px;
            background: #3498db;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .login-btn:hover {
            background: #2980b9;
        }

        .login-btn:disabled {
            background: #7f8c8d;
            cursor: not-allowed;
        }

        /* –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω */
        .main-screen {
            display: none;
            height: 100vh;
            flex-direction: column;
        }

        .main-screen.active {
            display: flex;
        }

        /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */
        .header {
            background: rgba(0,0,0,0.3);
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            backdrop-filter: blur(10px);
        }

        .header h1 {
            font-size: 1.8em;
            color: white;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #3498db;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
        }

        /* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏ */
        .apartment-controls {
            background: rgba(0,0,0,0.2);
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            backdrop-filter: blur(5px);
        }

        .apartment-info h2 {
            font-size: 1.5em;
            margin-bottom: 5px;
        }

        .apartment-info p {
            color: #bdc3c7;
            font-size: 14px;
        }

        .apartment-nav {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        /* –ö–Ω–æ–ø–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä */
        .apartment-buttons {
            padding: 15px 30px;
            display: flex;
            gap: 10px;
            justify-content: center;
            background: rgba(0,0,0,0.1);
        }

        .apartment-btn {
            padding: 8px 16px;
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.2);
            color: white;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 14px;
        }

        .apartment-btn.active {
            background: #3498db;
            border-color: #3498db;
        }

        .apartment-btn:hover {
            background: rgba(255,255,255,0.2);
        }

        /* –°–µ—Ç–∫–∞ –∫–∞–º–µ—Ä */
        .camera-grid {
            flex: 1;
            padding: 20px 30px;
            display: grid;
            gap: 15px;
            align-content: center;
        }

        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞ */
        .camera-grid.cameras-1 { grid-template-columns: 1fr; max-width: 800px; margin: 0 auto; }
        .camera-grid.cameras-2 { grid-template-columns: 1fr 1fr; }
        .camera-grid.cameras-3 { grid-template-columns: 1fr 1fr 1fr; }
        .camera-grid.cameras-4 { grid-template-columns: 1fr 1fr; grid-template-rows: 1fr 1fr; }
        .camera-grid.cameras-5, .camera-grid.cameras-6 { grid-template-columns: repeat(3, 1fr); }
        .camera-grid.cameras-7, .camera-grid.cameras-8, .camera-grid.cameras-9 { grid-template-columns: repeat(3, 1fr); }
        .camera-grid.cameras-10, .camera-grid.cameras-11, .camera-grid.cameras-12 { grid-template-columns: repeat(4, 1fr); }
        .camera-grid.cameras-13, .camera-grid.cameras-14, .camera-grid.cameras-15, .camera-grid.cameras-16 { grid-template-columns: repeat(4, 1fr); }

        /* –°–ª–æ—Ç –∫–∞–º–µ—Ä—ã */
        .camera-slot {
            position: relative;
            background: rgba(0,0,0,0.4);
            border-radius: 10px;
            overflow: hidden;
            aspect-ratio: 16/9;
            border: 2px solid rgba(255,255,255,0.1);
            cursor: pointer;
            transition: all 0.3s;
        }

        .camera-slot:hover {
            border-color: #3498db;
            transform: translateY(-2px);
        }

        .camera-slot.active {
            border-color: #27ae60;
        }

        .camera-slot.error {
            border-color: #e74c3c;
        }

        /* –í–∏–¥–µ–æ –≤ —Å–ª–æ—Ç–µ */
        .camera-video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            background: #2c3e50;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 48px;
            color: #34495e;
        }

        /* Overlay –∫–∞–º–µ—Ä—ã */
        .camera-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0,0,0,0.8));
            padding: 15px;
            color: white;
        }

        .camera-name {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .camera-status {
            font-size: 12px;
            color: #bdc3c7;
        }

        /* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ */
        .audio-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0,0,0,0.6);
            border: none;
            color: white;
            padding: 8px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s;
        }

        .audio-btn:hover {
            background: rgba(0,0,0,0.8);
        }

        .audio-btn.active {
            background: #e74c3c;
        }

        /* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ */
        .status-indicator {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #27ae60;
        }

        .status-indicator.offline {
            background: #e74c3c;
        }

        .status-indicator.connecting {
            background: #f39c12;
            animation: pulse 1s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        /* –ö–æ–Ω—Ç—Ä–æ–ª—ã –∞–≤—Ç–æ—Ü–∏–∫–ª–∞ */
        .autocycle-controls {
            background: rgba(0,0,0,0.2);
            padding: 15px 30px;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 15px;
            font-size: 14px;
            color: #bdc3c7;
        }

        .autocycle-controls select {
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.2);
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
        }

        /* –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º */
        .fullscreen-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: black;
            z-index: 2000;
            display: none;
            align-items: center;
            justify-content: center;
        }

        .fullscreen-overlay.active {
            display: flex;
        }

        .fullscreen-video {
            width: 100%;
            height: 100%;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 120px;
            color: #34495e;
        }

        .fullscreen-close {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0,0,0,0.6);
            border: none;
            color: white;
            font-size: 24px;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
        }

        .fullscreen-info {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background: rgba(0,0,0,0.6);
            padding: 15px;
            border-radius: 10px;
            color: white;
        }

        /* –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ */
        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }

        .btn-primary {
            background: #3498db;
            color: white;
        }

        .btn-primary:hover {
            background: #2980b9;
        }

        .btn-secondary {
            background: rgba(255,255,255,0.1);
            color: white;
            border: 1px solid rgba(255,255,255,0.2);
        }

        .btn-secondary:hover {
            background: rgba(255,255,255,0.2);
        }

        .btn-success {
            background: #27ae60;
            color: white;
        }

        .btn-danger {
            background: #e74c3c;
            color: white;
        }

        /* –°–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */
        .hidden {
            display: none !important;
        }

        /* –°–æ–æ–±—â–µ–Ω–∏—è */
        .message {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            color: white;
            z-index: 3000;
            font-weight: bold;
        }

        .message.success {
            background: #27ae60;
        }

        .message.error {
            background: #e74c3c;
        }

        .message.info {
            background: #3498db;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- –≠–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ -->
        <div class="login-screen" id="loginScreen">
            <div class="login-card">
                <h1 class="login-title">üè† –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è</h1>
                <form id="loginForm">
                    <div class="form-group">
                        <label for="username">–õ–æ–≥–∏–Ω:</label>
                        <input type="text" id="username" required autocomplete="username" placeholder="admin">
                    </div>
                    <div class="form-group">
                        <label for="password">–ü–∞—Ä–æ–ª—å:</label>
                        <input type="password" id="password" required autocomplete="current-password" placeholder="admin123">
                    </div>
                    <button type="submit" class="login-btn" id="loginBtn">
                        –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
                    </button>
                </form>
                <div style="margin-top: 20px; font-size: 12px; color: #bdc3c7;">
                    <strong>–¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:</strong><br>
                    admin / admin123 (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)<br>
                    operator / operator123 (–û–ø–µ—Ä–∞—Ç–æ—Ä)
                </div>
            </div>
        </div>

        <!-- –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω -->
        <div class="main-screen" id="mainScreen">
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
            <div class="header">
                <h1>üè† –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è</h1>
                <div class="user-info">
                    <div class="user-avatar" id="userAvatar">A</div>
                    <div>
                        <div id="userName">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</div>
                        <div style="font-size: 12px; color: #bdc3c7;">–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø</div>
                    </div>
                    <button class="btn btn-secondary" onclick="logout()">–í—ã–π—Ç–∏</button>
                </div>
            </div>

            <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏ -->
            <div class="apartment-controls">
                <div class="apartment-info">
                    <h2 id="apartmentTitle">—Ç–∞–π–ª–∞–Ω–¥</h2>
                    <p id="apartmentDescription">–ö–∞–º–µ—Ä: 1 | –ö–≤–∞—Ä—Ç–∏—Ä–∞ 4 –∏–∑ 4</p>
                </div>
                <div class="apartment-nav">
                    <button class="btn btn-secondary" onclick="previousApartment()">‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è</button>
                    <button class="btn btn-primary" onclick="toggleAutocycle()" id="autocycleBtn">‚è∏Ô∏è –°—Ç–æ–ø</button>
                    <button class="btn btn-secondary" onclick="nextApartment()">–°–ª–µ–¥—É—é—â–∞—è ‚Üí</button>
                </div>
            </div>

            <!-- –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä -->
            <div class="apartment-buttons" id="apartmentButtons">
                <div class="apartment-btn">12–ê</div>
                <div class="apartment-btn">–û–§-1</div>
                <div class="apartment-btn">–°–ö-1</div>
                <div class="apartment-btn active">91</div>
            </div>

            <!-- –°–µ—Ç–∫–∞ –∫–∞–º–µ—Ä -->
            <div class="camera-grid cameras-1" id="cameraGrid">
                <div class="camera-slot active">
                    <div class="camera-video">üìπ</div>
                    <div class="camera-overlay">
                        <div class="camera-name">—Ç–µ—Å—Ç–æ–≤–∞—è</div>
                        <div class="camera-status">640√ó480 ‚Ä¢ Online</div>
                    </div>
                    <button class="audio-btn" onclick="toggleAudio(1)">üîá</button>
                    <div class="status-indicator"></div>
                </div>
            </div>

            <!-- –ö–æ–Ω—Ç—Ä–æ–ª—ã –∞–≤—Ç–æ—Ü–∏–∫–ª–∞ -->
            <div class="autocycle-controls">
                <label>–ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ:</label>
                <select id="cycleInterval" onchange="updateCycleInterval()">
                    <option value="5">–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫</option>
                    <option value="10">–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫</option>
                    <option value="15" selected>–∫–∞–∂–¥—ã–µ 15 —Å–µ–∫</option>
                    <option value="30">–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫</option>
                    <option value="60">–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É</option>
                </select>
                <span id="cycleStatus">–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</span>
            </div>
        </div>

        <!-- –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º -->
        <div class="fullscreen-overlay" id="fullscreenOverlay">
            <div class="fullscreen-video">
                <button class="fullscreen-close" onclick="closeFullscreen()">√ó</button>
                <div class="fullscreen-info">
                    <div style="font-size: 18px; font-weight: bold;">—Ç–µ—Å—Ç–æ–≤–∞—è</div>
                    <div style="font-size: 14px; color: #bdc3c7;">1920√ó1080 ‚Ä¢ Online ‚Ä¢ HD –∫–∞—á–µ—Å—Ç–≤–æ</div>
                    <button class="btn btn-danger" style="margin-top: 10px;" onclick="toggleFullscreenAudio()">üîä 70%</button>
                </div>
                üìπ
            </div>
        </div>
    </div>

    <script>
        console.log('üöÄ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let currentUser = null;
        let apartments = [];
        let cameras = [];
        let currentApartmentIndex = 0;
        let autocycleInterval = null;
        let isAutocycling = false;
        let currentAudio = null;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        document.addEventListener('DOMContentLoaded', () => {
            console.log('üì± DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...');
            setupEventListeners();
            loadInitialData();
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        function setupEventListeners() {
            // –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            document.getElementById('loginForm').addEventListener('submit', handleLogin);
            
            // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
            document.addEventListener('keydown', handleHotkeys);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        function handleHotkeys(event) {
            if (document.getElementById('loginScreen').style.display !== 'none') return;
            
            switch(event.code) {
                case 'ArrowLeft':
                    event.preventDefault();
                    previousApartment();
                    break;
                case 'ArrowRight':
                    event.preventDefault();
                    nextApartment();
                    break;
                case 'Space':
                    event.preventDefault();
                    toggleAutocycle();
                    break;
                case 'Escape':
                    event.preventDefault();
                    closeFullscreen();
                    break;
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        async function loadInitialData() {
            try {
                console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã...');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–º–µ—Ä—ã –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
                const [camerasResponse, apartmentsResponse] = await Promise.all([
                    fetch('/api/cameras'),
                    fetch('/api/apartments')
                ]);
                
                cameras = await camerasResponse.json();
                apartments = await apartmentsResponse.json();
                
                console.log('üìπ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–º–µ—Ä:', cameras.length);
                console.log('üè† –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–≤–∞—Ä—Ç–∏—Ä:', apartments.length);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É
                if (apartments.length > 0) {
                    showApartment(0);
                    startAutocycle();
                }
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
                showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã', 'error');
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        async function handleLogin(event) {
            event.preventDefault();
            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            try {
                // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                const users = {
                    'admin': { password: 'admin123', role: 'admin', name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' },
                    'operator': { password: 'operator123', role: 'operator', name: '–û–ø–µ—Ä–∞—Ç–æ—Ä' }
                };
                
                if (users[username] && users[username].password === password) {
                    currentUser = { login: username, ...users[username] };
                    showMainScreen();
                    showMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                } else {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                }
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
                showMessage(error.message, 'error');
            }
        }

        // –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        function showMainScreen() {
            document.getElementById('loginScreen').style.display = 'none';
            document.getElementById('mainScreen').classList.add('active');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            document.getElementById('userName').textContent = currentUser.name;
            document.getElementById('userAvatar').textContent = currentUser.name[0];
            
            console.log('‚úÖ –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        }

        // –ü–æ–∫–∞–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã
        function showApartment(index) {
            if (index < 0 || index >= apartments.length) return;
            
            currentApartmentIndex = index;
            const apartment = apartments[index];
            const apartmentCameras = cameras.filter(c => c.apartment_name === apartment.apartment_name);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            document.getElementById('apartmentTitle').textContent = apartment.apartment_name;
            document.getElementById('apartmentDescription').textContent = 
                `–ö–∞–º–µ—Ä: ${apartmentCameras.length} | –ö–≤–∞—Ä—Ç–∏—Ä–∞ ${index + 1} –∏–∑ ${apartments.length}`;
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Å–µ—Ç–∫—É –∫–∞–º–µ—Ä
            renderCameraGrid(apartmentCameras);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä
            updateApartmentButtons();
            
            console.log(`üè† –ü–æ–∫–∞–∑–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞: ${apartment.apartment_name} (${apartmentCameras.length} –∫–∞–º–µ—Ä)`);
        }

        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ—Ç–∫–∏ –∫–∞–º–µ—Ä
        function renderCameraGrid(cameras) {
            const grid = document.getElementById('cameraGrid');
            grid.innerHTML = '';
            
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π
            grid.className = 'camera-grid';
            if (cameras.length > 0) {
                grid.classList.add(`cameras-${cameras.length}`);
            }
            
            // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –∫–∞–º–µ—Ä
            cameras.forEach((camera, index) => {
                const slot = document.createElement('div');
                slot.className = 'camera-slot active';
                slot.onclick = () => openFullscreen(camera);
                
                slot.innerHTML = `
                    <div class="camera-video">üìπ</div>
                    <div class="camera-overlay">
                        <div class="camera-name">${camera.camera_name}</div>
                        <div class="camera-status">640√ó480 ‚Ä¢ Online</div>
                    </div>
                    <button class="audio-btn" onclick="toggleAudio(${camera.id}, event)">üîá</button>
                    <div class="status-indicator"></div>
                `;
                
                grid.appendChild(slot);
            });
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä
        function updateApartmentButtons() {
            const container = document.getElementById('apartmentButtons');
            container.innerHTML = '';
            
            apartments.forEach((apartment, index) => {
                const btn = document.createElement('div');
                btn.className = 'apartment-btn';
                if (index === currentApartmentIndex) {
                    btn.classList.add('active');
                }
                btn.textContent = apartment.apartment_number || apartment.apartment_name.substring(0, 4);
                btn.onclick = () => showApartment(index);
                container.appendChild(btn);
            });
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏
        function previousApartment() {
            const newIndex = currentApartmentIndex > 0 ? currentApartmentIndex - 1 : apartments.length - 1;
            showApartment(newIndex);
        }

        function nextApartment() {
            const newIndex = currentApartmentIndex < apartments.length - 1 ? currentApartmentIndex + 1 : 0;
            showApartment(newIndex);
        }

        // –ê–≤—Ç–æ—Ü–∏–∫–ª
        function startAutocycle() {
            if (isAutocycling) return;
            
            const interval = parseInt(document.getElementById('cycleInterval').value) * 1000;
            autocycleInterval = setInterval(nextApartment, interval);
            isAutocycling = true;
            
            document.getElementById('autocycleBtn').innerHTML = '‚è∏Ô∏è –°—Ç–æ–ø';
            document.getElementById('cycleStatus').textContent = '–ê–∫—Ç–∏–≤–Ω–æ';
            
            console.log(`üîÑ –ê–≤—Ç–æ—Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω (${interval/1000} —Å–µ–∫)`);
        }

        function stopAutocycle() {
            if (!isAutocycling) return;
            
            clearInterval(autocycleInterval);
            isAutocycling = false;
            
            document.getElementById('autocycleBtn').innerHTML = '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç';
            document.getElementById('cycleStatus').textContent = '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
            
            console.log('‚è∏Ô∏è –ê–≤—Ç–æ—Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }

        function toggleAutocycle() {
            if (isAutocycling) {
                stopAutocycle();
            } else {
                startAutocycle();
            }
        }

        function updateCycleInterval() {
            if (isAutocycling) {
                stopAutocycle();
                startAutocycle();
            }
        }

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ
        function toggleAudio(cameraId, event) {
            event.stopPropagation();
            
            const audioBtn = event.target;
            
            if (currentAudio === cameraId) {
                // –í—ã–∫–ª—é—á–∞–µ–º –∑–≤—É–∫
                currentAudio = null;
                audioBtn.textContent = 'üîá';
                audioBtn.classList.remove('active');
                console.log(`üîá –ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è –∫–∞–º–µ—Ä—ã ${cameraId}`);
            } else {
                // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ (–≤—ã–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
                document.querySelectorAll('.audio-btn').forEach(btn => {
                    btn.textContent = 'üîá';
                    btn.classList.remove('active');
                });
                
                currentAudio = cameraId;
                audioBtn.textContent = 'üîä';
                audioBtn.classList.add('active');
                console.log(`üîä –ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –∫–∞–º–µ—Ä—ã ${cameraId}`);
            }
        }

        // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        function openFullscreen(camera) {
            document.getElementById('fullscreenOverlay').classList.add('active');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const info = document.querySelector('.fullscreen-info');
            info.querySelector('div').textContent = camera.camera_name;
            
            console.log(`üì∫ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º: ${camera.camera_name}`);
        }

        function closeFullscreen() {
            document.getElementById('fullscreenOverlay').classList.remove('active');
            console.log('üì∫ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
        }

        function toggleFullscreenAudio() {
            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
            console.log('üîä –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ');
        }

        // –í—ã—Ö–æ–¥
        function logout() {
            currentUser = null;
            stopAutocycle();
            document.getElementById('mainScreen').classList.remove('active');
            document.getElementById('loginScreen').style.display = 'flex';
            document.getElementById('loginForm').reset();
            console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        }

        // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        function showMessage(text, type = 'info') {
            const message = document.createElement('div');
            message.className = `message ${type}`;
            message.textContent = text;
            document.body.appendChild(message);
            
            setTimeout(() => {
                message.remove();
            }, 3000);
        }

        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    </script>
</body>
</html>
EOF
fi

log_info "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

echo ""
log_info "üè† –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
echo ""
echo "üéØ –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó:"
echo "  ‚úÖ –°–µ—Ç–∫–∞ –∫–∞–º–µ—Ä 4√ó4 (–¥–æ 16 –∫–∞–º–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)"
echo "  ‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏"
echo "  ‚úÖ –ê–≤—Ç–æ—Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 5-60 —Å–µ–∫—É–Ω–¥"
echo "  ‚úÖ –ö–ª–∏–∫ –ø–æ –∫–∞–º–µ—Ä–µ ‚Üí –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º 1080p"
echo "  ‚úÖ –ö–Ω–æ–ø–∫–∏ –∑–≤—É–∫–∞ üîá/üîä (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞–º–µ—Ä–∞ —Å–æ –∑–≤—É–∫–æ–º)"
echo "  ‚úÖ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: ‚Üê/‚Üí –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –ü—Ä–æ–±–µ–ª –ø–∞—É–∑–∞, Esc –≤—ã—Ö–æ–¥"
echo "  ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞ 1√ó1 –¥–æ 4√ó4"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "  1. –í Electron –æ–∫–Ω–µ –Ω–∞–∂–º–∏—Ç–µ Ctrl+R (–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å)"
echo "  2. –í–æ–π–¥–∏—Ç–µ: admin/admin123"
echo "  3. –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∂–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–º–µ—Ä –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º"
echo ""
echo "üé¨ –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ RTSP –ø–æ—Ç–æ–∫–∏"
echo "    –≤ —ç—Ç–æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
