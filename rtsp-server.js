/**
 * RTSP Integration Server - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞—É–¥–∏–æ
 * –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–≤—É–∫–∞
 */

import http from 'http';
import fs from 'fs';
import path from 'path';
import url from 'url';
import bcrypt from 'bcrypt';
import RTSPStreamManager from './rtsp-stream-manager.js';

class RTSPServer {
    constructor() {
        this.streamManager = new RTSPStreamManager();
        this.sessions = new Map();
        this.currentConfig = null;
        this.currentApartmentIndex = 0;
        this.cycleTimer = null;
        this.cycleInterval = 15000; // 15 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.isRTSPEnabled = false; // –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è RTSP —Ä–µ–∂–∏–º–∞
        this.isAudioEnabled = false; // –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ
        this.activeAudioCamera = null; // ID –∫–∞–º–µ—Ä—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º –∞—É–¥–∏–æ
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        this.loadConfig();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π stream manager
        this.setupStreamManagerEvents();
        
        // –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        this.server = http.createServer((req, res) => this.handleRequest(req, res));
        
        console.log('üöÄ RTSP Server –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—É–¥–∏–æ');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π stream manager
     */
    setupStreamManagerEvents() {
        this.streamManager.on('streamConnected', ({ streamId, camera, type }) => {
            console.log(`‚úÖ ${type === 'video' ? '–í–∏–¥–µ–æ' : '–ê—É–¥–∏–æ'} –ø–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${camera.camera_name} (${streamId})`);
        });

        this.streamManager.on('streamError', ({ streamId, camera, error, attempts }) => {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞ ${camera.camera_name}: ${error.message} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts})`);
        });

        this.streamManager.on('streamFailed', ({ streamId, camera }) => {
            console.log(`üíÄ –ü–æ—Ç–æ–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${camera.camera_name} (${streamId})`);
        });

        this.streamManager.on('audioStarted', ({ streamId, camera }) => {
            this.activeAudioCamera = camera.id;
            console.log(`üîä –ê—É–¥–∏–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: ${camera.camera_name}`);
        });

        this.streamManager.on('audioStopped', ({ streamId, camera }) => {
            if (this.activeAudioCamera === camera.id) {
                this.activeAudioCamera = null;
            }
            console.log(`üîá –ê—É–¥–∏–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: ${camera.camera_name}`);
        });

        this.streamManager.on('audioError', ({ streamId, camera, error }) => {
            console.error(`üí• –û—à–∏–±–∫–∞ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞ ${camera.camera_name}:`, error.message);
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    loadConfig() {
        try {
            const configPath = './config.json';
            if (fs.existsSync(configPath)) {
                const configData = fs.readFileSync(configPath, 'utf8');
                this.currentConfig = JSON.parse(configData);
                
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∞—É–¥–∏–æ
                this.validateAudioConfig();
                
                console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${this.currentConfig.apartments.length} –∫–≤–∞—Ä—Ç–∏—Ä, ${this.currentConfig.cameras.length} –∫–∞–º–µ—Ä`);
            } else {
                console.log('‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
                this.createDemoConfig();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            this.createDemoConfig();
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞—É–¥–∏–æ
     */
    validateAudioConfig() {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞—É–¥–∏–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–∞–º–µ—Ä–∞–º
        this.currentConfig.cameras.forEach(camera => {
            if (!camera.hasOwnProperty('audio_enabled')) {
                camera.audio_enabled = true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞—É–¥–∏–æ –≤–∫–ª—é—á–µ–Ω–æ
            }
            if (!camera.hasOwnProperty('audio_codec')) {
                camera.audio_codec = 'aac'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é AAC
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ
        if (!this.currentConfig.audio_settings) {
            this.currentConfig.audio_settings = {
                default_volume: 0.7,
                exclusive_mode: true, // –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞–º–µ—Ä–∞ —Å –∞—É–¥–∏–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                supported_codecs: ['aac', 'pcm_mulaw', 'pcm_alaw'],
                sample_rate: 44100,
                bitrate: 128000
            };
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—É–¥–∏–æ
     */
    createDemoConfig() {
        this.currentConfig = {
            users: [
                {
                    login: "admin",
                    password_hash: "$2b$10$dummy.hash.for.admin123.password", // admin123
                    role: "admin"
                },
                {
                    login: "operator",
                    password_hash: "$2b$10$dummy.hash.for.operator123.password", // operator123
                    role: "operator"
                }
            ],
            apartments: [
                {
                    id: 1,
                    apartment_name: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞"
                }
            ],
            cameras: [
                {
                    id: 1,
                    camera_name: "–î–µ–º–æ –∫–∞–º–µ—Ä–∞ (BigBuckBunny)",
                    rtsp_link: "rtsp://wowzaec2demo.streamlock.net/vod-multitrack/_definst_/mp4:BigBuckBunny_115k.mp4/playlist.m3u8",
                    rtsp_link_high: "rtsp://wowzaec2demo.streamlock.net/vod-multitrack/_definst_/mp4:BigBuckBunny_175k.mp4/playlist.m3u8",
                    apartment_id: 1,
                    position_x: 0,
                    position_y: 0,
                    audio_enabled: true,
                    audio_codec: "aac"
                }
            ],
            audio_settings: {
                default_volume: 0.7,
                exclusive_mode: true,
                supported_codecs: ['aac', 'pcm_mulaw', 'pcm_alaw'],
                sample_rate: 44100,
                bitrate: 128000
            },
            settings: {
                rotation_interval: 15,
                connection_timeout: 10,
                max_retry_attempts: 5,
                enable_audio_by_default: false
            }
        };

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try {
            fs.writeFileSync('./config.json', JSON.stringify(this.currentConfig, null, 2));
            console.log('‚úÖ –î–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async handleRequest(req, res) {
        const parsedUrl = url.parse(req.url, true);
        const pathname = parsedUrl.pathname;
        const method = req.method;

        // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

        if (method === 'OPTIONS') {
            res.writeHead(200);
            res.end();
            return;
        }

        try {
            // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
            if (pathname === '/') {
                await this.serveStaticFile(res, './index.html', 'text/html');
            } else if (pathname.startsWith('/api/')) {
                await this.handleAPIRequest(req, res, pathname, method);
            } else if (pathname.startsWith('/stream_output/')) {
                await this.serveStreamFile(res, pathname);
            } else if (pathname.startsWith('/audio_output/')) {
                await this.serveAudioFile(res, pathname);
            } else {
                this.send404(res);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
            this.sendError(res, 500, '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async handleAPIRequest(req, res, pathname, method) {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö POST –∑–∞–ø—Ä–æ—Å–∞
        let body = '';
        if (method === 'POST') {
            body = await this.getRequestBody(req);
        }

        switch (pathname) {
            case '/api/login':
                if (method === 'POST') {
                    await this.handleLogin(res, JSON.parse(body));
                }
                break;
                
            case '/api/apartments':
                if (method === 'GET') {
                    await this.handleGetApartments(res);
                }
                break;
                
            case '/api/cameras':
                if (method === 'GET') {
                    await this.handleGetCameras(res);
                }
                break;
                
            case '/api/rtsp/toggle':
                if (method === 'POST') {
                    await this.handleRTSPToggle(res);
                }
                break;
                
            case '/api/rtsp/status':
                if (method === 'GET') {
                    await this.handleRTSPStatus(res);
                }
                break;

            case '/api/audio/toggle':
                if (method === 'POST') {
                    await this.handleAudioToggle(res, JSON.parse(body));
                }
                break;

            case '/api/audio/status':
                if (method === 'GET') {
                    await this.handleAudioStatus(res);
                }
                break;
                
            case '/api/stream/start':
                if (method === 'POST') {
                    await this.handleStreamStart(res, JSON.parse(body));
                }
                break;
                
            case '/api/stream/stop':
                if (method === 'POST') {
                    await this.handleStreamStop(res, JSON.parse(body));
                }
                break;

            case '/api/stream/quality':
                if (method === 'POST') {
                    await this.handleStreamQuality(res, JSON.parse(body));
                }
                break;
                
            default:
                this.send404(res);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ
     */
    async handleAudioToggle(res, data) {
        try {
            const { cameraId, quality = 'low' } = data;
            
            if (!cameraId) {
                return this.sendError(res, 400, '–ù–µ —É–∫–∞–∑–∞–Ω ID –∫–∞–º–µ—Ä—ã');
            }

            const camera = this.currentConfig.cameras.find(c => c.id === parseInt(cameraId));
            if (!camera) {
                return this.sendError(res, 404, '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            if (!camera.audio_enabled) {
                return this.sendError(res, 400, '–ê—É–¥–∏–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–æ–π –∫–∞–º–µ—Ä–æ–π');
            }

            const isAudioActive = await this.streamManager.toggleAudio(cameraId, quality);
            
            this.sendJSON(res, {
                success: true,
                audioActive: isAudioActive,
                camera: camera.camera_name,
                message: isAudioActive ? '–ê—É–¥–∏–æ –≤–∫–ª—é—á–µ–Ω–æ' : '–ê—É–¥–∏–æ –≤—ã–∫–ª—é—á–µ–Ω–æ'
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
            this.sendError(res, 500, error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã
     */
    async handleAudioStatus(res) {
        try {
            const streamStatus = this.streamManager.getStreamStatus();
            const audioStatus = {
                enabled: this.isAudioEnabled,
                currentAudioCamera: this.activeAudioCamera,
                exclusiveMode: this.currentConfig.audio_settings.exclusive_mode,
                supportedCodecs: this.currentConfig.audio_settings.supported_codecs,
                activeStreams: streamStatus.audioStreams,
                cameras: this.currentConfig.cameras.map(camera => ({
                    id: camera.id,
                    name: camera.camera_name,
                    audioEnabled: camera.audio_enabled,
                    audioCodec: camera.audio_codec,
                    isCurrentlyActive: this.activeAudioCamera === camera.id
                }))
            };

            this.sendJSON(res, audioStatus);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏–æ:', error);
            this.sendError(res, 500, error.message);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–∞
     */
    async handleStreamQuality(res, data) {
        try {
            const { cameraId, quality } = data;
            
            if (!cameraId || !quality) {
                return this.sendError(res, 400, '–ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
            }

            const camera = this.currentConfig.cameras.find(c => c.id === parseInt(cameraId));
            if (!camera) {
                return this.sendError(res, 404, '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
            const currentStreamId = `${cameraId}_${quality === 'high' ? 'low' : 'high'}`;
            await this.streamManager.stopStream(currentStreamId);

            // –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å –Ω–æ–≤—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            const includeAudio = this.activeAudioCamera === parseInt(cameraId);
            await this.streamManager.startStream(camera, quality, includeAudio);

            this.sendJSON(res, {
                success: true,
                camera: camera.camera_name,
                quality: quality,
                message: `–ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${quality}`
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞:', error);
            this.sendError(res, 500, error.message);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ RTSP (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    async handleRTSPStatus(res) {
        try {
            const ffmpegAvailable = await this.streamManager.checkFFmpegAvailability();
            const streamStatus = this.streamManager.getStreamStatus();
            
            const status = {
                enabled: this.isRTSPEnabled,
                ffmpegAvailable: ffmpegAvailable,
                activeStreams: streamStatus.totalStreams,
                audioStreams: streamStatus.audioStreams,
                currentAudioStream: streamStatus.currentAudioStream,
                streams: streamStatus.streams,
                audioEnabled: this.isAudioEnabled,
                activeAudioCamera: this.activeAudioCamera
            };

            this.sendJSON(res, status);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ RTSP:', error);
            this.sendError(res, 500, error.message);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    async handleStreamStart(res, data) {
        try {
            const { cameraId, quality = 'low', includeAudio = false } = data;
            
            const camera = this.currentConfig.cameras.find(c => c.id === parseInt(cameraId));
            if (!camera) {
                return this.sendError(res, 404, '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞—É–¥–∏–æ
            if (includeAudio && !camera.audio_enabled) {
                return this.sendError(res, 400, '–ê—É–¥–∏–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–æ–π –∫–∞–º–µ—Ä–æ–π');
            }

            const streamId = await this.streamManager.startStream(camera, quality, includeAudio);
            
            this.sendJSON(res, {
                success: true,
                streamId: streamId,
                camera: camera.camera_name,
                quality: quality,
                audioIncluded: includeAudio
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞:', error);
            this.sendError(res, 500, error.message);
        }
    }

    /**
     * –ü–æ–¥–∞—á–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
     */
    async serveAudioFile(res, pathname) {
        try {
            const filePath = path.join('.', pathname);
            
            if (!fs.existsSync(filePath)) {
                return this.send404(res);
            }

            const ext = path.extname(filePath);
            let contentType = 'application/octet-stream';
            
            if (ext === '.m3u8') {
                contentType = 'application/vnd.apple.mpegurl';
            } else if (ext === '.ts') {
                contentType = 'video/mp2t';
            }

            res.setHeader('Content-Type', contentType);
            res.setHeader('Cache-Control', 'no-cache');
            
            const fileStream = fs.createReadStream(filePath);
            fileStream.pipe(res);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞:', error);
            this.send404(res);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    async handleLogin(res, data) {
        try {
            const { login, password } = data;
            
            if (!login || !password) {
                return this.sendError(res, 400, '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            }

            const user = this.currentConfig.users.find(u => u.login === login);
            if (!user) {
                return this.sendError(res, 401, '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }

            // –í—Ä–µ–º–µ–Ω–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const isValidPassword = password === 'admin123' || password === 'operator123';
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ: const isValidPassword = await bcrypt.compare(password, user.password_hash);
            
            if (!isValidPassword) {
                return this.sendError(res, 401, '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            const sessionToken = this.generateSessionToken();
            this.sessions.set(sessionToken, {
                user: user,
                loginTime: Date.now(),
                permissions: this.getUserPermissions(user.role)
            });

            this.sendJSON(res, {
                success: true,
                token: sessionToken,
                user: {
                    login: user.login,
                    role: user.role
                },
                permissions: this.getUserPermissions(user.role)
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            this.sendError(res, 500, '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserPermissions(role) {
        const permissions = {
            canViewCameras: true,
            canControlAudio: false,
            canChangeSettings: false,
            canManageUsers: false
        };

        if (role === 'admin') {
            permissions.canControlAudio = true;
            permissions.canChangeSettings = true;
            permissions.canManageUsers = true;
        } else if (role === 'operator') {
            permissions.canControlAudio = true;
        }

        return permissions;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
     */
    generateSessionToken() {
        return Math.random().toString(36).substring(2, 15) + 
               Math.random().toString(36).substring(2, 15) + 
               Date.now().toString(36);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö POST –∑–∞–ø—Ä–æ—Å–∞
     */
    getRequestBody(req) {
        return new Promise((resolve, reject) => {
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            req.on('end', () => {
                resolve(body);
            });
            req.on('error', reject);
        });
    }

    /**
     * –ü–æ–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
     */
    async serveStaticFile(res, filePath, contentType) {
        try {
            if (fs.existsSync(filePath)) {
                const fileContent = fs.readFileSync(filePath);
                res.writeHead(200, { 'Content-Type': contentType });
                res.end(fileContent);
            } else {
                this.send404(res);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ —Ñ–∞–π–ª–∞:', error);
            this.send404(res);
        }
    }

    /**
     * –ü–æ–¥–∞—á–∞ –ø–æ—Ç–æ–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
     */
    async serveStreamFile(res, pathname) {
        try {
            const filePath = path.join('.', pathname);
            
            if (!fs.existsSync(filePath)) {
                return this.send404(res);
            }

            const ext = path.extname(filePath);
            let contentType = 'application/octet-stream';
            
            if (ext === '.m3u8') {
                contentType = 'application/vnd.apple.mpegurl';
            } else if (ext === '.ts') {
                contentType = 'video/mp2t';
            }

            res.setHeader('Content-Type', contentType);
            res.setHeader('Cache-Control', 'no-cache');
            
            const fileStream = fs.createReadStream(filePath);
            fileStream.pipe(res);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
            this.send404(res);
        }
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö API endpoints
     */
    async handleGetApartments(res) {
        this.sendJSON(res, this.currentConfig.apartments);
    }

    async handleGetCameras(res) {
        this.sendJSON(res, this.currentConfig.cameras);
    }

    async handleRTSPToggle(res) {
        try {
            this.isRTSPEnabled = !this.isRTSPEnabled;
            
            if (!this.isRTSPEnabled) {
                await this.streamManager.stopAllStreams();
                this.activeAudioCamera = null;
            }
            
            this.sendJSON(res, {
                success: true,
                enabled: this.isRTSPEnabled,
                message: this.isRTSPEnabled ? 'RTSP –≤–∫–ª—é—á–µ–Ω' : 'RTSP –≤—ã–∫–ª—é—á–µ–Ω'
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è RTSP:', error);
            this.sendError(res, 500, error.message);
        }
    }

    async handleStreamStop(res, data) {
        try {
            const { streamId } = data;
            await this.streamManager.stopStream(streamId);
            
            this.sendJSON(res, {
                success: true,
                message: '–ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞:', error);
            this.sendError(res, 500, error.message);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞
     */
    sendJSON(res, data) {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(data));
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏
     */
    sendError(res, statusCode, message) {
        res.writeHead(statusCode, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: message }));
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ 404
     */
    send404(res) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('404 Not Found');
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async start(port = 3000) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
        const ffmpegAvailable = await this.streamManager.checkFFmpegAvailability();
        if (!ffmpegAvailable) {
            console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RTSP –ø–æ—Ç–æ–∫–∞–º–∏.');
            console.log('üí° –î–ª—è openSUSE: sudo zypper install --from packman ffmpeg ffmpeg-4');
        }

        this.server.listen(port, () => {
            console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
            console.log(`üîó –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:${port}`);
            console.log(`üë§ –õ–æ–≥–∏–Ω: admin, –ü–∞—Ä–æ–ª—å: admin123`);
            if (ffmpegAvailable) {
                console.log(`üé• RTSP –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞`);
                console.log(`üîä –ê—É–¥–∏–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞`);
            }
        });
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async stop() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        await this.streamManager.stopAllStreams();
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        this.server.close(() => {
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        });
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = new RTSPServer();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    await server.stop();
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    await server.stop();
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫
server.start(3000).catch(error => {
    console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
});

export default RTSPServer;
