const express = require('express');
const bcrypt = require('bcrypt');
const path = require('path');
const fs = require('fs');

console.log('üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...\n');

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
console.log('üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
try {
    console.log('‚úÖ express:', require('express/package.json').version);
    console.log('‚úÖ bcrypt:', require('bcrypt/package.json').version);
    console.log('‚úÖ path: –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å');
    console.log('‚úÖ fs: –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å');
} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error.message);
}

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:');
const requiredFiles = [
    'src/index-web.html',
    'src/styles.css',
    'package.json'
];

requiredFiles.forEach(file => {
    if (fs.existsSync(file)) {
        console.log(`‚úÖ ${file} - –Ω–∞–π–¥–µ–Ω`);
    } else {
        console.log(`‚ùå ${file} - –ù–ï –ù–ê–ô–î–ï–ù`);
    }
});

// 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
console.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const testUsers = [
    { login: "admin", password: "admin123", role: "admin" },
    { login: "operator1", password: "operator123", role: "operator" }
];

async function testAuth() {
    try {
        // –°–æ–∑–¥–∞–µ–º —Ö–µ—à–∏ –ø–∞—Ä–æ–ª–µ–π
        const users = [];
        for (const user of testUsers) {
            const hash = await bcrypt.hash(user.password, 10);
            users.push({
                login: user.login,
                password_hash: hash,
                role: user.role
            });
            console.log(`‚úÖ –•–µ—à –¥–ª—è ${user.login}: ${hash.substring(0, 20)}...`);
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª–µ–π
        for (const testUser of testUsers) {
            const storedUser = users.find(u => u.login === testUser.login);
            if (storedUser) {
                const isValid = await bcrypt.compare(testUser.password, storedUser.password_hash);
                console.log(`${isValid ? '‚úÖ' : '‚ùå'} –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è ${testUser.login}: ${isValid}`);
            }
        }

        return users;
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
        return [];
    }
}

// 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
async function createTestServer() {
    console.log('\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    const app = express();
    app.use(express.json());
    app.use(express.static('src'));

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const users = await testAuth();
    
    // –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const testConfig = {
        apartments: [
            { id: 1, apartment_name: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ 1", apartment_number: "101" },
            { id: 2, apartment_name: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ 2", apartment_number: "102" }
        ],
        cameras: [
            { id: 1, camera_name: "–ö–∞–º–µ—Ä–∞ 1", apartment_name: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ 1", rtsp_link: "rtsp://test1" },
            { id: 2, camera_name: "–ö–∞–º–µ—Ä–∞ 2", apartment_name: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ 1", rtsp_link: "rtsp://test2" }
        ],
        settings: {
            rotation_interval: 15,
            connection_timeout: 10
        }
    };

    // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    app.use((req, res, next) => {
        console.log(`üì® ${new Date().toISOString()} - ${req.method} ${req.path}`);
        if (req.body && Object.keys(req.body).length > 0) {
            console.log('üì¶ Body:', JSON.stringify(req.body, null, 2));
        }
        next();
    });

    // API –º–∞—Ä—à—Ä—É—Ç—ã
    app.post('/api/login', async (req, res) => {
        console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', req.body);
        
        try {
            const { username, password } = req.body;

            if (!username || !password) {
                console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                return res.status(400).json({ 
                    success: false, 
                    error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
                });
            }

            const user = users.find(u => u.login === username);
            if (!user) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', username);
                return res.status(401).json({ 
                    success: false, 
                    error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
                });
            }

            const isPasswordValid = await bcrypt.compare(password, user.password_hash);
            if (!isPasswordValid) {
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è:', username);
                return res.status(401).json({ 
                    success: false, 
                    error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
                });
            }

            console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', username);
            res.json({ 
                success: true, 
                user: { login: user.login, role: user.role } 
            });

        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            res.status(500).json({ 
                success: false, 
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
            });
        }
    });

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã
    app.get('/api/config', (req, res) => {
        console.log('üìã –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        res.json(testConfig);
    });

    app.get('/api/apartments', (req, res) => {
        res.json(testConfig.apartments);
    });

    app.get('/api/cameras', (req, res) => {
        res.json(testConfig.cameras);
    });

    app.get('/api/settings', (req, res) => {
        res.json(testConfig.settings);
    });

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    app.get('/', (req, res) => {
        console.log('üè† –ó–∞–ø—Ä–æ—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        res.sendFile(path.join(__dirname, 'src', 'index-web.html'));
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    app.use((error, req, res, next) => {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.status(500).json({ 
            success: false, 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    });

    return app;
}

// 5. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    try {
        const app = await createTestServer();
        const PORT = 3000;
        
        app.listen(PORT, () => {
            console.log(`\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!`);
            console.log(`üåê URL: http://localhost:${PORT}`);
            console.log(`\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:`);
            console.log(`üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin / admin123`);
            console.log(`üë§ –û–ø–µ—Ä–∞—Ç–æ—Ä: operator1 / operator123`);
            console.log(`\nüîç –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å`);
            console.log(`‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C`);
        });

    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
startServer();
