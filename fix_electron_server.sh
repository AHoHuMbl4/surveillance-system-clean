#!/bin/bash

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞ –≤ Electron
# –ü—Ä–æ–±–ª–µ–º–∞: ES –º–æ–¥—É–ª–∏ vs CommonJS

set -e

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }
log_warn() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }

echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RTSP Monitor Electron"
echo "===================================="

cd rtsp-monitor-electron

# 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ CommonJS —Å–µ—Ä–≤–µ—Ä–∞
create_simple_server() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞..."
    
    cat > simple-server.js << 'EOF'
/**
 * –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * CommonJS —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π
 */

const http = require('http');
const path = require('path');
const fs = require('fs');
const crypto = require('crypto');

class SimpleRTSPServer {
    constructor() {
        this.port = 3000;
        this.users = [
            { login: 'admin', password: 'admin123', role: 'admin' },
            { login: 'operator', password: 'operator123', role: 'operator' }
        ];
        this.cameras = [
            {
                id: 1,
                camera_name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–º–µ—Ä–∞ 1',
                apartment_name: '–î–µ–º–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                rtsp_link: 'rtsp://185.70.184.101:8554/cam91-99'
            },
            {
                id: 2,
                camera_name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–º–µ—Ä–∞ 2',
                apartment_name: '–î–µ–º–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                rtsp_link: 'rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4'
            }
        ];
        this.apartments = [
            { id: 1, apartment_name: '–î–µ–º–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞', apartment_number: 'TEST-1' }
        ];
        
        console.log('üé• Simple RTSP Server –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
     */
    createServer() {
        const server = http.createServer((req, res) => {
            this.handleRequest(req, res);
        });
        
        return server;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    handleRequest(req, res) {
        const url = new URL(req.url, `http://${req.headers.host}`);
        const pathname = url.pathname;
        
        // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
        
        if (req.method === 'OPTIONS') {
            res.writeHead(200);
            res.end();
            return;
        }

        console.log(`üìä ${req.method} ${pathname}`);

        // –ú–∞—Ä—à—Ä—É—Ç—ã API
        if (pathname.startsWith('/api/')) {
            this.handleAPI(req, res, pathname);
        } else if (pathname === '/' || pathname === '/index.html') {
            this.serveIndexHTML(res);
        } else {
            res.writeHead(404);
            res.end('Not Found');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    handleAPI(req, res, pathname) {
        res.setHeader('Content-Type', 'application/json');
        
        try {
            switch (pathname) {
                case '/api/cameras':
                    res.writeHead(200);
                    res.end(JSON.stringify(this.cameras));
                    break;
                    
                case '/api/apartments':
                    res.writeHead(200);
                    res.end(JSON.stringify(this.apartments));
                    break;
                    
                case '/api/login':
                    if (req.method === 'POST') {
                        this.handleLogin(req, res);
                    } else {
                        res.writeHead(405);
                        res.end(JSON.stringify({ error: 'Method not allowed' }));
                    }
                    break;
                    
                case '/api/system-status':
                    res.writeHead(200);
                    res.end(JSON.stringify({
                        status: 'running',
                        version: '1.0.0',
                        cameras_count: this.cameras.length,
                        apartments_count: this.apartments.length,
                        uptime: process.uptime()
                    }));
                    break;
                    
                default:
                    res.writeHead(404);
                    res.end(JSON.stringify({ error: 'API endpoint not found' }));
            }
        } catch (error) {
            console.error('‚ùå API Error:', error);
            res.writeHead(500);
            res.end(JSON.stringify({ error: 'Internal server error' }));
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞
     */
    handleLogin(req, res) {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        
        req.on('end', () => {
            try {
                const { login, password } = JSON.parse(body);
                const user = this.users.find(u => u.login === login && u.password === password);
                
                if (user) {
                    res.writeHead(200);
                    res.end(JSON.stringify({
                        success: true,
                        user: { login: user.login, role: user.role }
                    }));
                } else {
                    res.writeHead(401);
                    res.end(JSON.stringify({
                        success: false,
                        error: 'Invalid credentials'
                    }));
                }
            } catch (error) {
                res.writeHead(400);
                res.end(JSON.stringify({ error: 'Invalid JSON' }));
            }
        });
    }

    /**
     * –û—Ç–¥–∞—á–∞ –≥–ª–∞–≤–Ω–æ–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    serveIndexHTML(res) {
        const indexPath = path.join(__dirname, 'index.html');
        
        if (fs.existsSync(indexPath)) {
            const content = fs.readFileSync(indexPath, 'utf8');
            res.setHeader('Content-Type', 'text/html; charset=utf-8');
            res.writeHead(200);
            res.end(content);
        } else {
            // Fallback HTML –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            const html = `
<!DOCTYPE html>
<html>
<head>
    <title>RTSP Monitor - Electron</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
        .status { background: #27ae60; color: white; padding: 20px; border-radius: 10px; }
        .info { margin: 20px 0; padding: 20px; background: #ecf0f1; border-radius: 10px; }
    </style>
</head>
<body>
    <h1>üé• RTSP Monitor</h1>
    <div class="status">‚úÖ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</div>
    
    <div class="info">
        <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
        <p><strong>–°–µ—Ä–≤–µ—Ä:</strong> –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}</p>
        <p><strong>–ö–∞–º–µ—Ä:</strong> ${this.cameras.length}</p>
        <p><strong>–ö–≤–∞—Ä—Ç–∏—Ä:</strong> ${this.apartments.length}</p>
        <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
    </div>
    
    <div class="info">
        <h3>üîê –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏</h3>
        <p><strong>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</strong> admin / admin123</p>
        <p><strong>–û–ø–µ—Ä–∞—Ç–æ—Ä:</strong> operator / operator123</p>
    </div>

    <script>
        console.log('üöÄ RTSP Monitor Electron –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω');
        
        // –¢–µ—Å—Ç API
        fetch('/api/system-status')
            .then(response => response.json())
            .then(data => {
                console.log('‚úÖ API —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω:', data);
                document.title = 'RTSP Monitor - ' + data.status;
            })
            .catch(error => {
                console.error('‚ùå API —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω:', error);
            });
    </script>
</body>
</html>`;
            
            res.setHeader('Content-Type', 'text/html; charset=utf-8');
            res.writeHead(200);
            res.end(html);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
     */
    start(port = 3000) {
        this.port = port;
        const server = this.createServer();
        
        server.listen(port, 'localhost', () => {
            console.log(`üåê Simple RTSP Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
            console.log(`üîê –¢–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏–Ω—ã: admin/admin123, operator/operator123`);
            console.log(`‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏`);
        });

        server.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        });

        return server;
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (require.main === module) {
    const server = new SimpleRTSPServer();
    server.start(3000);
}

module.exports = SimpleRTSPServer;
EOF
    log_info "simple-server.js —Å–æ–∑–¥–∞–Ω"
}

# 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Electron main.js
update_electron_main() {
    log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ electron-main.js..."
    
    cat > electron-main.js << 'EOF'
const { app, BrowserWindow, Menu, Tray } = require('electron');
const { spawn } = require('child_process');
const path = require('path');

let mainWindow;
let serverProcess;
let tray;

function createWindow() {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞...');
    
    mainWindow = new BrowserWindow({
        width: 1400,
        height: 900,
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true,
            webSecurity: false
        },
        title: 'RTSP Monitor - –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è',
        show: false
    });

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    startServer();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        console.log('üåê –ó–∞–≥—Ä—É–∑–∫–∞ http://localhost:3000');
        mainWindow.loadURL('http://localhost:3000');
        mainWindow.show();
    }, 3000);

    mainWindow.on('close', (event) => {
        if (!app.isQuiting) {
            event.preventDefault();
            mainWindow.hide();
        }
    });

    mainWindow.webContents.on('did-finish-load', () => {
        console.log('‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    });

    mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription, validatedURL) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', errorDescription);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –æ–∫–Ω–µ
        const errorHtml = `
        <html>
        <body style="font-family: Arial; text-align: center; padding: 50px;">
            <h1 style="color: #e74c3c;">‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h1>
            <p>–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É</p>
            <p><strong>–û—à–∏–±–∫–∞:</strong> ${errorDescription}</p>
            <button onclick="location.reload()" style="padding: 10px 20px; font-size: 16px;">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </body>
        </html>`;
        
        mainWindow.loadURL('data:text/html;charset=utf-8,' + encodeURIComponent(errorHtml));
    });
}

function startServer() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    const serverPath = path.join(__dirname, 'simple-server.js');
    
    serverProcess = spawn('node', [serverPath], {
        stdio: ['pipe', 'pipe', 'pipe'],
        env: {
            ...process.env,
            NODE_ENV: 'production'
        }
    });

    serverProcess.stdout.on('data', (data) => {
        console.log('üìä Server:', data.toString().trim());
    });

    serverProcess.stderr.on('data', (data) => {
        console.error('‚ùå Server Error:', data.toString().trim());
    });

    serverProcess.on('close', (code) => {
        console.log(`üõë –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
    });

    serverProcess.on('error', (error) => {
        console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    });
}

function createTray() {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–π –±–µ–∑ –∏–∫–æ–Ω–∫–∏
    try {
        const Menu = require('electron').Menu;
        
        const contextMenu = Menu.buildFromTemplate([
            {
                label: '–ü–æ–∫–∞–∑–∞—Ç—å RTSP Monitor',
                click: () => {
                    mainWindow.show();
                }
            },
            {
                label: '–í—ã—Ö–æ–¥',
                click: () => {
                    app.isQuiting = true;
                    if (serverProcess) {
                        serverProcess.kill();
                    }
                    app.quit();
                }
            }
        ]);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ç—Ä–µ—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        Menu.setApplicationMenu(contextMenu);
        console.log('üìã –ú–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ');
        
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–π:', error.message);
    }
}

app.whenReady().then(() => {
    console.log('‚ö° Electron –≥–æ—Ç–æ–≤');
    createWindow();
    createTray();
});

app.on('window-all-closed', () => {
    // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
});

app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

app.on('before-quit', () => {
    app.isQuiting = true;
    if (serverProcess) {
        serverProcess.kill();
    }
});

console.log('üöÄ RTSP Monitor Electron Main –∑–∞–≥—Ä—É–∂–µ–Ω');
EOF
    log_info "electron-main.js –æ–±–Ω–æ–≤–ª–µ–Ω"
}

# 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ package.json
fix_package_json() {
    log_info "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ package.json..."
    
    # –û–±–Ω–æ–≤–ª—è–µ–º main —Ñ–∞–π–ª
    cat > package.json << 'EOF'
{
  "name": "rtsp-monitor-electron",
  "version": "1.0.0",
  "description": "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è",
  "main": "electron-main.js",
  "scripts": {
    "start": "electron .",
    "dev": "NODE_ENV=development electron .",
    "test-server": "node simple-server.js",
    "build": "./node_modules/.bin/electron-builder",
    "build:win": "./node_modules/.bin/electron-builder --win",
    "build:linux": "./node_modules/.bin/electron-builder --linux",
    "clean": "rimraf dist build installers node_modules/.cache"
  },
  "devDependencies": {
    "electron": "^27.1.3",
    "electron-builder": "^24.8.1",
    "rimraf": "^5.0.5"
  },
  "build": {
    "appId": "com.rtspmonitor.app",
    "productName": "RTSP Monitor",
    "directories": {
      "output": "installers"
    },
    "files": [
      "electron-main.js",
      "simple-server.js",
      "autonomous-server.js",
      "autonomous-rtsp-manager.js",
      "index.html",
      "ffmpeg/**/*"
    ],
    "win": {
      "target": [
        {
          "target": "portable",
          "arch": ["x64"]
        }
      ],
      "artifactName": "${productName}-${version}-Windows-Portable.${ext}"
    },
    "linux": {
      "target": [
        {
          "target": "AppImage",
          "arch": ["x64"]
        }
      ],
      "artifactName": "${productName}-${version}-Linux.${ext}"
    }
  }
}
EOF
    log_info "package.json –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
}

# 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
test_fixes() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π..."
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ simple-server.js..."
    if node -c simple-server.js; then
        log_info "‚úÖ simple-server.js —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    else
        log_error "‚ùå –û—à–∏–±–∫–∞ –≤ simple-server.js"
        return 1
    fi
    
    # –¢–µ—Å—Ç electron-main.js
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ electron-main.js..."
    if node -c electron-main.js; then
        log_info "‚úÖ electron-main.js —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    else
        log_error "‚ùå –û—à–∏–±–∫–∞ –≤ electron-main.js"
        return 1
    fi
    
    log_info "–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    create_simple_server
    update_electron_main
    fix_package_json
    test_fixes
    
    echo ""
    log_info "üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"
    echo ""
    echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "  1. –¢–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞: npm run test-server"
    echo "  2. –ó–∞–ø—É—Å–∫ Electron: npm start"
    echo "  3. –°–±–æ—Ä–∫–∞ Windows: npm run build:win"
    echo ""
    echo "üîß –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:"
    echo "  ‚úÖ –°–æ–∑–¥–∞–Ω CommonJS —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–µ—Ä–≤–µ—Ä"
    echo "  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω Electron main –ø—Ä–æ—Ü–µ—Å—Å"
    echo "  ‚úÖ –£–±—Ä–∞–Ω—ã ES –º–æ–¥—É–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    echo "  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"
}

# –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
main
