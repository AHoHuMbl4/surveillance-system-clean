// main.rs - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å Tauri

#![cfg_attr(
    all(not(debug_assertions), target_os = "windows"),
    windows_subsystem = "windows"
)]

use surveillance_system::{
    AuthManager, ConfigManager, LoginRequest, LoginResponse, 
    User, Config, Apartment, Camera, get_current_user, is_authenticated, has_admin_role, SYSTEM_STATE
};
use std::sync::Mutex;
use once_cell::sync::Lazy;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
static AUTH_MANAGER: Lazy<Mutex<AuthManager>> = Lazy::new(|| {
    Mutex::new(AuthManager::new())
});

static CONFIG_MANAGER: Lazy<Mutex<ConfigManager>> = Lazy::new(|| {
    Mutex::new(ConfigManager::new())
});

// Tauri –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
#[tauri::command]
fn login(request: LoginRequest) -> Result<LoginResponse, String> {
    log::info!("–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", request.login);
    
    let auth_manager = AUTH_MANAGER.lock().map_err(|e| e.to_string())?;
    let response = auth_manager.authenticate(&request);
    
    if response.success {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if let Some(user) = &response.user {
            SYSTEM_STATE.lock().map_err(|e| e.to_string())?.authenticate(user.clone());
            log::info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", user.login);
        }
    } else {
        log::warn!("–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", request.login);
    }
    
    Ok(response)
}

#[tauri::command]
fn logout() -> Result<(), String> {
    log::info!("–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
    
    SYSTEM_STATE.lock().map_err(|e| e.to_string())?.logout();
    
    Ok(())
}

#[tauri::command]
fn get_current_user_info() -> Result<Option<User>, String> {
    Ok(get_current_user())
}

#[tauri::command]
fn check_authentication() -> Result<bool, String> {
    Ok(is_authenticated())
}

#[tauri::command]
fn check_admin_role() -> Result<bool, String> {
    Ok(has_admin_role())
}

// Tauri –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
#[tauri::command]
async fn load_config() -> Result<Config, String> {
    log::info!("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ConfigManager –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π
    let mut temp_config_manager = ConfigManager::new();
    temp_config_manager.load_from_nextcloud().await.map_err(|e| e.to_string())?;
    
    let config = temp_config_manager.get_config().clone();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π ConfigManager —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    {
        let mut config_manager = CONFIG_MANAGER.lock().map_err(|e| e.to_string())?;
        config_manager.update_config(config.clone()).map_err(|e| e.to_string())?;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    SYSTEM_STATE.lock().map_err(|e| e.to_string())?.config = Some(config.clone());
    
    log::info!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {} –∫–≤–∞—Ä—Ç–∏—Ä, {} –∫–∞–º–µ—Ä", 
               config.apartments.len(), config.cameras.len());
    
    Ok(config)
}

#[tauri::command]
fn get_apartments() -> Result<Vec<Apartment>, String> {
    let config_manager = CONFIG_MANAGER.lock().map_err(|e| e.to_string())?;
    let config = config_manager.get_config();
    Ok(config.apartments.clone())
}

#[tauri::command]
fn get_cameras() -> Result<Vec<Camera>, String> {
    let config_manager = CONFIG_MANAGER.lock().map_err(|e| e.to_string())?;
    let config = config_manager.get_config();
    Ok(config.cameras.clone())
}

#[tauri::command]
fn get_cameras_by_apartment(apartment_name: String) -> Result<Vec<Camera>, String> {
    let config_manager = CONFIG_MANAGER.lock().map_err(|e| e.to_string())?;
    let config = config_manager.get_config();
    
    let cameras = config.get_cameras_by_apartment(&apartment_name)
        .into_iter()
        .cloned()
        .collect();
    
    Ok(cameras)
}

#[tauri::command]
fn add_camera(name: String, apartment: String, rtsp_link: String) -> Result<u32, String> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if !has_admin_role() {
        return Err("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞".to_string());
    }
    
    log::info!("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã: {} –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É {}", name, apartment);
    
    let camera_id = {
        let mut config_manager = CONFIG_MANAGER.lock().map_err(|e| e.to_string())?;
        
        // –ü–æ–ª—É—á–∞–µ–º –º—É—Ç–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        let config = config_manager.get_config().clone();
        let mut updated_config = config;
        
        let camera_id = updated_config.add_camera(name, apartment, rtsp_link)
            .map_err(|e| e.to_string())?;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_manager.update_config(updated_config).map_err(|e| e.to_string())?;
        
        camera_id
    };
    
    log::info!("–ö–∞–º–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {}", camera_id);
    Ok(camera_id)
}

#[tauri::command]
fn add_apartment(name: String, number: String) -> Result<u32, String> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if !has_admin_role() {
        return Err("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞".to_string());
    }
    
    log::info!("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {} ({})", name, number);
    
    let apartment_id = {
        let mut config_manager = CONFIG_MANAGER.lock().map_err(|e| e.to_string())?;
        
        let config = config_manager.get_config().clone();
        let mut updated_config = config;
        
        let apartment_id = updated_config.add_apartment(name, number)
            .map_err(|e| e.to_string())?;
        
        config_manager.update_config(updated_config).map_err(|e| e.to_string())?;
        
        apartment_id
    };
    
    log::info!("–ö–≤–∞—Ä—Ç–∏—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {}", apartment_id);
    Ok(apartment_id)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
#[tauri::command]
fn greet(name: &str) -> Result<String, String> {
    Ok(format!("–ü—Ä–∏–≤–µ—Ç, {}! –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç.", name))
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
#[tauri::command]
fn get_system_status() -> Result<SystemStatus, String> {
    let is_auth = is_authenticated();
    let user = get_current_user();
    let config = SYSTEM_STATE.lock().map_err(|e| e.to_string())?.config.clone();
    
    Ok(SystemStatus {
        is_authenticated: is_auth,
        current_user: user.as_ref().map(|u| u.login.clone()),
        user_role: user.as_ref().map(|u| format!("{:?}", u.role)),
        config_loaded: config.is_some(),
        apartments_count: config.as_ref().map(|c| c.apartments.len()).unwrap_or(0),
        cameras_count: config.as_ref().map(|c| c.cameras.len()).unwrap_or(0),
    })
}

#[derive(serde::Serialize)]
struct SystemStatus {
    is_authenticated: bool,
    current_user: Option<String>,
    user_role: Option<String>,
    config_loaded: bool,
    apartments_count: usize,
    cameras_count: usize,
}

fn main() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
    env_logger::init();
    
    log::info!("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è");
    
    tauri::Builder::default()
        .invoke_handler(tauri::generate_handler![
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            login,
            logout,
            get_current_user_info,
            check_authentication,
            check_admin_role,
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            load_config,
            get_apartments,
            get_cameras,
            get_cameras_by_apartment,
            add_camera,
            add_apartment,
            // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
            greet,
            get_system_status
        ])
        .setup(|app| {
            log::info!("Tauri –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
            
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            let _handle = app.handle();
            tauri::async_runtime::spawn(async move {
                log::info!("–§–æ–Ω–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            });
            
            Ok(())
        })
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}
