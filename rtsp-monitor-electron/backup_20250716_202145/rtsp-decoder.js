/**
 * –†–µ–∞–ª—å–Ω—ã–π RTSP –¥–µ–∫–æ–¥–µ—Ä –¥–ª—è Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç FFmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ RTSP –≤ HLS –ø–æ—Ç–æ–∫–∏
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class RTSPDecoder {
    constructor() {
        this.activeStreams = new Map();
        this.outputDir = './temp_streams';
        this.ffmpegPath = this.getFFmpegPath();
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (!fs.existsSync(this.outputDir)) {
            fs.mkdirSync(this.outputDir, { recursive: true });
        }
        
        console.log('üé• RTSP Decoder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('üé¨ FFmpeg –ø—É—Ç—å:', this.ffmpegPath);
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ FFmpeg
     */
    getFFmpegPath() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π FFmpeg
        const systemPaths = [
            '/usr/bin/ffmpeg',
            '/usr/local/bin/ffmpeg',
            'ffmpeg'  // –í PATH
        ];
        
        for (const ffmpegPath of systemPaths) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                require('child_process').execSync(`${ffmpegPath} -version`, { 
                    stdio: 'pipe',
                    timeout: 5000 
                });
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π FFmpeg: ${ffmpegPath}`);
                return ffmpegPath;
            } catch (error) {
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
            }
        }
        
        // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π
        const platform = process.platform;
        const arch = process.arch;
        
        let platformDir = '';
        let ffmpegName = 'ffmpeg';
        
        switch (platform) {
            case 'linux':
                platformDir = arch === 'arm64' ? 'linux-arm64' : 'linux-x64';
                break;
            case 'win32':
                platformDir = arch === 'x64' ? 'win64' : 'win32';
                ffmpegName = 'ffmpeg.exe';
                break;
            case 'darwin':
                platformDir = arch === 'arm64' ? 'macos-arm64' : 'macos-x64';
                break;
            default:
                platformDir = 'linux-x64';
        }
        
        const embeddedPath = path.join(__dirname, 'ffmpeg', platformDir, ffmpegName);
        console.log(`üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π FFmpeg: ${embeddedPath}`);
        return embeddedPath;
    }

    /**
     * –ó–∞–ø—É—Å–∫ RTSP –ø–æ—Ç–æ–∫–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ HLS
     */
    async startStream(camera, quality = 'low') {
        const streamId = `${camera.id}_${quality}`;
        
        if (this.activeStreams.has(streamId)) {
            console.log(`‚ö†Ô∏è –ü–æ—Ç–æ–∫ ${streamId} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω`);
            return this.activeStreams.get(streamId);
        }

        console.log(`üöÄ –ó–∞–ø—É—Å–∫ RTSP –ø–æ—Ç–æ–∫–∞: ${camera.camera_name} (${quality})`);
        console.log(`üì° RTSP URL: ${camera.rtsp_link}`);

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ—Ç–æ–∫–∞
        const streamDir = path.join(this.outputDir, streamId);
        if (!fs.existsSync(streamDir)) {
            fs.mkdirSync(streamDir, { recursive: true });
        }

        const playlistPath = path.join(streamDir, 'playlist.m3u8');

        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
        const qualitySettings = quality === 'high' ? {
            resolution: '1920x1080',
            bitrate: '2M',
            fps: '25'
        } : {
            resolution: '854x480', 
            bitrate: '800k',
            fps: '15'
        };

        // FFmpeg –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è RTSP ‚Üí HLS
        const ffmpegArgs = [
            '-re',  // –ß–∏—Ç–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ —Å –Ω–∞—Ç–∏–≤–Ω—ã–º frame rate
            '-rtsp_transport', 'tcp',
            '-i', camera.rtsp_link,
            '-c:v', 'libx264',
            '-preset', 'ultrafast',
            '-tune', 'zerolatency',
            '-s', qualitySettings.resolution,
            '-b:v', qualitySettings.bitrate,
            '-r', qualitySettings.fps,
            '-g', '30',
            '-sc_threshold', '0',
            '-f', 'hls',
            '-hls_time', '2',
            '-hls_list_size', '3',
            '-hls_flags', 'delete_segments+independent_segments',
            '-hls_allow_cache', '0',
            playlistPath
        ];

        console.log(`üé¨ FFmpeg –∫–æ–º–∞–Ω–¥–∞: ${this.ffmpegPath} ${ffmpegArgs.join(' ')}`);

        try {
            const ffmpegProcess = spawn(this.ffmpegPath, ffmpegArgs, {
                stdio: ['pipe', 'pipe', 'pipe']
            });

            const streamData = {
                id: streamId,
                camera: camera,
                quality: quality,
                process: ffmpegProcess,
                playlistPath: playlistPath,
                streamDir: streamDir,
                status: 'connecting',
                startTime: Date.now()
            };

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
            this.setupFFmpegHandlers(streamData);

            this.activeStreams.set(streamId, streamData);
            
            console.log(`‚úÖ RTSP –ø–æ—Ç–æ–∫ ${streamId} –∑–∞–ø—É—â–µ–Ω`);
            return streamData;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FFmpeg –¥–ª—è ${streamId}:`, error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å–∞
     */
    setupFFmpegHandlers(streamData) {
        const { process: ffmpegProcess, id: streamId, camera } = streamData;

        ffmpegProcess.stdout.on('data', (data) => {
            // FFmpeg –æ–±—ã—á–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –≤ stderr, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            console.log(`üìä FFmpeg stdout ${streamId}:`, data.toString().trim());
        });

        ffmpegProcess.stderr.on('data', (data) => {
            const output = data.toString();
            
            // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (output.includes('fps=') || output.includes('bitrate=')) {
                if (streamData.status === 'connecting') {
                    console.log(`‚úÖ RTSP –ø–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${camera.camera_name}`);
                    streamData.status = 'streaming';
                }
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (output.includes('error') || output.includes('failed')) {
                console.error(`‚ùå FFmpeg error ${streamId}:`, output.trim());
                streamData.status = 'error';
            }
        });

        ffmpegProcess.on('close', (code) => {
            console.log(`üõë FFmpeg –ø—Ä–æ—Ü–µ—Å—Å ${streamId} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
            this.activeStreams.delete(streamId);
            
            // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            this.cleanupStream(streamData);
        });

        ffmpegProcess.on('error', (error) => {
            console.error(`üí• –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ FFmpeg ${streamId}:`, error);
            streamData.status = 'error';
        });
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞
     */
    async stopStream(streamId) {
        const streamData = this.activeStreams.get(streamId);
        if (!streamData) {
            console.warn(`‚ö†Ô∏è –ü–æ—Ç–æ–∫ ${streamId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏`);
            return;
        }

        console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ ${streamId}`);
        
        if (streamData.process) {
            streamData.process.kill('SIGTERM');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫
            setTimeout(() => {
                if (!streamData.process.killed) {
                    streamData.process.kill('SIGKILL');
                }
            }, 5000);
        }

        this.cleanupStream(streamData);
        this.activeStreams.delete(streamId);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Ç–æ–∫–∞
     */
    cleanupStream(streamData) {
        try {
            if (fs.existsSync(streamData.streamDir)) {
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ—Ç–æ–∫–∞
                const files = fs.readdirSync(streamData.streamDir);
                files.forEach(file => {
                    fs.unlinkSync(path.join(streamData.streamDir, file));
                });
                fs.rmdirSync(streamData.streamDir);
                
                console.log(`üßπ –û—á–∏—â–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è ${streamData.id}`);
            }
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ${streamData.id}:`, error.message);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ URL HLS –ø–æ—Ç–æ–∫–∞
     */
    getStreamURL(streamId) {
        const streamData = this.activeStreams.get(streamId);
        if (!streamData) {
            return null;
        }
        
        return `/stream/${streamId}/playlist.m3u8`;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ HLS —Ñ–∞–π–ª–∞
     */
    isStreamReady(streamId) {
        const streamData = this.activeStreams.get(streamId);
        if (!streamData) {
            return false;
        }
        
        return fs.existsSync(streamData.playlistPath);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
     */
    async stopAllStreams() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö RTSP –ø–æ—Ç–æ–∫–æ–≤...');
        
        const streamIds = Array.from(this.activeStreams.keys());
        for (const streamId of streamIds) {
            await this.stopStream(streamId);
        }
        
        console.log('‚úÖ –í—Å–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
     */
    getStreamsStatus() {
        const status = [];
        
        for (const [streamId, streamData] of this.activeStreams.entries()) {
            status.push({
                id: streamId,
                camera: streamData.camera.camera_name,
                quality: streamData.quality,
                status: streamData.status,
                uptime: Date.now() - streamData.startTime,
                url: this.getStreamURL(streamId),
                ready: this.isStreamReady(streamId)
            });
        }
        
        return status;
    }
}

module.exports = RTSPDecoder;
