/**
 * Autonomous Surveillance Server - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è
 * –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π + –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π FFmpeg –¥–ª—è RTSP –ø–æ—Ç–æ–∫–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 250 IP-–∫–∞–º–µ—Ä —Å H.264 –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
 */

import http from 'http';
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import { URL, fileURLToPath } from 'url';
import EmbeddedFFmpegManager from './autonomous-rtsp-manager.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class AutonomousServer {
    constructor() {
        this.server = http.createServer();
        this.sessions = new Map();
        this.currentConfig = null;
        this.configPath = path.join(__dirname, 'config.json');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ FFmpeg –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        this.rtspManager = new EmbeddedFFmpegManager();
        
        // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        this.systemInfo = {
            name: 'Autonomous Surveillance System',
            version: '2.0.0-embedded-ffmpeg',
            platform: process.platform,
            arch: process.arch,
            nodeVersion: process.version,
            autonomous: true,
            features: {
                realRTSP: true,
                embeddedFFmpeg: true,
                h264Support: true,
                mjpegOutput: true,
                multiPlatform: true,
                noDependencies: true
            }
        };

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        this.server.on('request', (req, res) => {
            this.handleRequest(req, res);
        });

        console.log('üé• Autonomous Surveillance Server with Embedded FFmpeg');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
     */
    async initialize() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π FFmpeg
        const ffmpegStatus = await this.rtspManager.checkFFmpegAvailability();
        console.log('üé¨ –°—Ç–∞—Ç—É—Å FFmpeg:', ffmpegStatus.available ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
        
        if (!ffmpegStatus.available) {
            console.warn('‚ö†Ô∏è FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, RTSP –ø–æ—Ç–æ–∫–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
            console.warn('üìÅ –°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: ffmpeg/[platform]/ffmpeg[.exe]');
            console.warn('üìñ –°–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ FFmpeg');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        await this.loadOrCreateConfig();
        
        console.log('‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async loadOrCreateConfig() {
        try {
            if (fs.existsSync(this.configPath)) {
                const configData = fs.readFileSync(this.configPath, 'utf8');
                this.currentConfig = JSON.parse(configData);
                console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞');
            } else {
                console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
                this.currentConfig = this.createDefaultConfig();
                this.saveConfig();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            this.currentConfig = this.createDefaultConfig();
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    createDefaultConfig() {
        return {
            system: {
                autonomous: true,
                platform: process.platform,
                arch: process.arch,
                embeddedFFmpeg: true
            },
            users: [
                {
                    login: 'admin',
                    password_hash: this.hashPassword('admin123'),
                    role: 'admin'
                },
                {
                    login: 'operator',
                    password_hash: this.hashPassword('operator123'),
                    role: 'operator'
                }
            ],
            apartments: [
                { id: 1, apartment_name: "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –ü—É—à–∫–∏–Ω–∞", apartment_number: "12–ê" },
                { id: 2, apartment_name: "–û—Ñ–∏—Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", apartment_number: "–û–§-1" },
                { id: 3, apartment_name: "–°–∫–ª–∞–¥ ‚Ññ1", apartment_number: "–°–ö-1" }
            ],
            cameras: [
                { id: 1, camera_name: "–ü—Ä–∏—Ö–æ–∂–∞—è", apartment_id: 1, apartment_name: "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –ü—É—à–∫–∏–Ω–∞", rtsp_link: "demo://camera1", status: "online" },
                { id: 2, camera_name: "–ö—É—Ö–Ω—è", apartment_id: 1, apartment_name: "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –ü—É—à–∫–∏–Ω–∞", rtsp_link: "demo://camera2", status: "online" },
                { id: 3, camera_name: "–ì–æ—Å—Ç–∏–Ω–∞—è", apartment_id: 1, apartment_name: "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –ü—É—à–∫–∏–Ω–∞", rtsp_link: "demo://camera3", status: "offline" },
                { id: 4, camera_name: "–°–ø–∞–ª—å–Ω—è", apartment_id: 1, apartment_name: "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –ü—É—à–∫–∏–Ω–∞", rtsp_link: "demo://camera4", status: "online" }
            ],
            settings: {
                rotation_interval: 15,
                connection_timeout: 10,
                max_retry_attempts: 5,
                grid_size: 16,
                ffmpeg_enabled: true
            }
        };
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    saveConfig() {
        try {
            fs.writeFileSync(this.configPath, JSON.stringify(this.currentConfig, null, 2));
            console.log('üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
     */
    hashPassword(password) {
        return crypto.createHash('sha256').update(password).digest('hex');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
     */
    verifyPassword(password, hash) {
        const passwordHash = this.hashPassword(password);
        return passwordHash === hash;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏
     */
    generateSessionToken() {
        return crypto.randomBytes(32).toString('hex');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserPermissions(role) {
        return {
            viewCameras: true,
            manageStreams: true,
            manageAudio: true,
            adminPanel: role === 'admin',
            editCameras: role === 'admin',
            editApartments: role === 'admin',
            editSettings: role === 'admin'
        };
    }

    /**
     * –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async handleRequest(req, res) {
        const url = new URL(req.url, `http://${req.headers.host}`);
        const pathname = url.pathname;
        const method = req.method;

        // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

        if (method === 'OPTIONS') {
            res.writeHead(200);
            res.end();
            return;
        }

        console.log(`üì° ${method} ${pathname}`);

        try {
            // API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            if (pathname.startsWith('/api/')) {
                await this.handleAPIRequest(req, res, pathname, method);
            }
            // –ü–æ—Ç–æ–∫–∏ –≤–∏–¥–µ–æ
            else if (pathname.startsWith('/stream/')) {
                await this.handleStreamRequest(req, res, pathname);
            }
            // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
            else {
                await this.serveStaticFile(req, res, pathname);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
            this.sendError(res, 500, 'Internal Server Error');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    async handleAPIRequest(req, res, pathname, method) {
        let body = '';
        if (method === 'POST' || method === 'PUT') {
            body = await this.getRequestBody(req);
        }

        switch (pathname) {
            case '/api/login':
                if (method === 'POST') {
                    await this.handleLogin(res, JSON.parse(body));
                }
                break;

            case '/api/apartments':
                if (method === 'GET') {
                    await this.handleGetApartments(res);
                } else if (method === 'POST') {
                    await this.handleAddApartment(res, JSON.parse(body));
                } else if (method === 'PUT') {
                    await this.handleUpdateApartment(res, JSON.parse(body));
                } else if (method === 'DELETE') {
                    await this.handleDeleteApartment(res, JSON.parse(body));
                }
                break;

            case '/api/cameras':
                if (method === 'GET') {
                    await this.handleGetCameras(res);
                } else if (method === 'POST') {
                    await this.handleAddCamera(res, JSON.parse(body));
                } else if (method === 'PUT') {
                    await this.handleUpdateCamera(res, JSON.parse(body));
                } else if (method === 'DELETE') {
                    await this.handleDeleteCamera(res, JSON.parse(body));
                }
                break;

            case '/api/camera/test':
                if (method === 'POST') {
                    await this.handleTestCamera(res, JSON.parse(body));
                }
                break;

            case '/api/ffmpeg/status':
                if (method === 'GET') {
                    await this.handleFFmpegStatus(res);
                }
                break;

            case '/api/stream/start':
                if (method === 'POST') {
                    await this.handleStreamStart(res, JSON.parse(body));
                }
                break;

            case '/api/stream/stop':
                if (method === 'POST') {
                    await this.handleStreamStop(res, JSON.parse(body));
                }
                break;

            case '/api/streams/status':
                if (method === 'GET') {
                    await this.handleStreamsStatus(res);
                }
                break;

            case '/api/audio/toggle':
                if (method === 'POST') {
                    await this.handleAudioToggle(res, JSON.parse(body));
                }
                break;

            case '/api/settings':
                if (method === 'GET') {
                    await this.handleGetSettings(res);
                } else if (method === 'PUT') {
                    await this.handleUpdateSettings(res, JSON.parse(body));
                }
                break;

            default:
                this.send404(res);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ POST –∑–∞–ø—Ä–æ—Å–∞
     */
    async getRequestBody(req) {
        return new Promise((resolve) => {
            let body = '';
            req.on('data', chunk => body += chunk.toString());
            req.on('end', () => resolve(body));
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
     */
    async handleLogin(res, data) {
        try {
            const { login, password } = data;
            
            console.log(`üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: ${login}`);
            
            if (!login || !password) {
                return this.sendError(res, 400, '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            }

            const user = this.currentConfig.users.find(u => u.login === login);
            if (!user) {
                console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${login}`);
                return this.sendError(res, 401, '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }

            const isValidPassword = this.verifyPassword(password, user.password_hash);
            if (!isValidPassword) {
                console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è: ${login}`);
                return this.sendError(res, 401, '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }

            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${login}`);

            const sessionToken = this.generateSessionToken();
            this.sessions.set(sessionToken, {
                user: user,
                loginTime: Date.now(),
                permissions: this.getUserPermissions(user.role)
            });

            this.sendJSON(res, {
                success: true,
                token: sessionToken,
                user: {
                    login: user.login,
                    role: user.role
                }
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            this.sendError(res, 500, '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä
     */
    async handleGetApartments(res) {
        this.sendJSON(res, {
            success: true,
            apartments: this.currentConfig.apartments
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
     */
    async handleAddApartment(res, data) {
        try {
            const { apartment_name, apartment_number } = data;
            
            if (!apartment_name || !apartment_number) {
                return this.sendError(res, 400, '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            }

            const newId = Math.max(...this.currentConfig.apartments.map(a => a.id), 0) + 1;
            
            const newApartment = {
                id: newId,
                apartment_name,
                apartment_number
            };

            this.currentConfig.apartments.push(newApartment);
            this.saveConfig();

            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞: ${apartment_name}`);

            this.sendJSON(res, {
                success: true,
                apartment: newApartment
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã:', error);
            this.sendError(res, 500, '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä
     */
    async handleGetCameras(res) {
        this.sendJSON(res, {
            success: true,
            cameras: this.currentConfig.cameras
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
     */
    async handleAddCamera(res, data) {
        try {
            const { camera_name, apartment_name, rtsp_link } = data;
            
            if (!camera_name || !apartment_name || !rtsp_link) {
                return this.sendError(res, 400, '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            }

            const apartment = this.currentConfig.apartments.find(a => a.apartment_name === apartment_name);
            if (!apartment) {
                return this.sendError(res, 400, '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const newId = Math.max(...this.currentConfig.cameras.map(c => c.id), 0) + 1;
            
            const newCamera = {
                id: newId,
                camera_name,
                apartment_id: apartment.id,
                apartment_name,
                rtsp_link,
                status: 'offline'
            };

            this.currentConfig.cameras.push(newCamera);
            this.saveConfig();

            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞–º–µ—Ä–∞: ${camera_name}`);

            this.sendJSON(res, {
                success: true,
                camera: newCamera
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã:', error);
            this.sendError(res, 500, '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RTSP –∫–∞–º–µ—Ä—ã
     */
    async handleTestCamera(res, data) {
        try {
            const { rtspUrl } = data;
            
            if (!rtspUrl) {
                return this.sendError(res, 400, 'RTSP URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
            }

            console.log(`üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã: ${rtspUrl}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg
            const ffmpegStatus = await this.rtspManager.checkFFmpegAvailability();
            if (!ffmpegStatus.available) {
                return this.sendJSON(res, {
                    success: false,
                    error: 'FFmpeg not available',
                    details: '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫.'
                });
            }

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º RTSP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            const testResult = await this.rtspManager.testRTSPConnection(rtspUrl, 10000);

            this.sendJSON(res, testResult);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã:', error);
            this.sendJSON(res, {
                success: false,
                error: 'Test failed',
                details: error.message
            });
        }
    }

    /**
     * –°—Ç–∞—Ç—É—Å FFmpeg
     */
    async handleFFmpegStatus(res) {
        try {
            const status = await this.rtspManager.checkFFmpegAvailability();
            this.sendJSON(res, status);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ FFmpeg:', error);
            this.sendError(res, 500, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ FFmpeg');
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞
     */
    async handleStreamStart(res, data) {
        try {
            const { camera, quality = 'low' } = data;
            
            if (!camera || !camera.rtsp_link) {
                return this.sendError(res, 400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã');
            }

            console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞: ${camera.camera_name} (${quality})`);

            const result = await this.rtspManager.startStream(camera, quality);
            this.sendJSON(res, result);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞:', error);
            this.sendError(res, 500, '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞');
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞
     */
    async handleStreamStop(res, data) {
        try {
            const { streamId } = data;
            
            if (!streamId) {
                return this.sendError(res, 400, 'ID –ø–æ—Ç–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
            }

            console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞: ${streamId}`);

            const result = await this.rtspManager.stopStream(streamId);
            this.sendJSON(res, { success: result });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞:', error);
            this.sendError(res, 500, '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞');
        }
    }

    /**
     * –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
     */
    async handleStreamsStatus(res) {
        try {
            const status = this.rtspManager.getStreamsStatus();
            this.sendJSON(res, status);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ç–æ–∫–æ–≤:', error);
            this.sendError(res, 500, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
     */
    async handleAudioToggle(res, data) {
        try {
            const { cameraId } = data;
            
            // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ
            console.log(`üîä –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∫–∞–º–µ—Ä—ã: ${cameraId}`);
            
            this.sendJSON(res, {
                success: true,
                activeAudioCamera: cameraId,
                message: '–ê—É–¥–∏–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ'
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
            this.sendError(res, 500, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞—É–¥–∏–æ');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async handleGetSettings(res) {
        this.sendJSON(res, {
            success: true,
            settings: this.currentConfig.settings
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async handleUpdateSettings(res, data) {
        try {
            this.currentConfig.settings = { ...this.currentConfig.settings, ...data };
            this.saveConfig();

            console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);

            this.sendJSON(res, {
                success: true,
                settings: this.currentConfig.settings
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            this.sendError(res, 500, '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–æ–≤
     */
    async handleStreamRequest(req, res, pathname) {
        try {
            // –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ RTSP –º–µ–Ω–µ–¥–∂–µ—Ä—É
            const streamPath = pathname.replace('/stream/', '');
            
            // –ü—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –ø—Ä–æ–∫—Å–∏ –ø–æ—Ç–æ–∫–∞–º RTSP –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            res.writeHead(302, {
                'Location': `http://localhost:8080/${streamPath}`
            });
            res.end();

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–∞:', error);
            this.send404(res);
        }
    }

    /**
     * –ü–æ–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
     */
    async serveStaticFile(req, res, pathname) {
        try {
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            let filePath;
            if (pathname === '/') {
                filePath = path.join(__dirname, 'index.html');
            } else {
                filePath = path.join(__dirname, pathname);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if (!fs.existsSync(filePath)) {
                this.send404(res);
                return;
            }

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞
            const ext = path.extname(filePath).toLowerCase();
            const mimeTypes = {
                '.html': 'text/html',
                '.js': 'application/javascript',
                '.css': 'text/css',
                '.json': 'application/json',
                '.png': 'image/png',
                '.jpg': 'image/jpeg',
                '.gif': 'image/gif',
                '.svg': 'image/svg+xml',
                '.ico': 'image/x-icon'
            };

            const contentType = mimeTypes[ext] || 'application/octet-stream';

            // –ß—Ç–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            const fileContent = fs.readFileSync(filePath);
            res.writeHead(200, { 'Content-Type': contentType });
            res.end(fileContent);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∞—á–∏ —Ñ–∞–π–ª–∞:', error);
            this.send404(res);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞
     */
    sendJSON(res, data) {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(data));
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏
     */
    sendError(res, statusCode, message) {
        res.writeHead(statusCode, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: message, autonomous: true }));
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ 404
     */
    send404(res) {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('404 Not Found - Autonomous Surveillance System');
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
     */
    async start(port = 3000) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        await this.initialize();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        const ffmpegStatus = await this.rtspManager.checkFFmpegAvailability();
        
        console.log(`‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞:`);
        console.log(`üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${process.platform}-${process.arch}`);
        console.log(`‚ö° Node.js: ${process.version}`);
        console.log(`üé¨ FFmpeg: ${ffmpegStatus.available ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
        console.log(`üîê –î–µ–º–æ –ø–∞—Ä–æ–ª–∏: admin/admin123, operator/operator123`);

        // –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        this.server.listen(port, () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
            console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É`);
            
            if (!ffmpegStatus.available) {
                console.log(`‚ö†Ô∏è –î–ª—è RTSP –ø–æ—Ç–æ–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg (—Å–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é)`);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', async () => {
            console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
            await this.shutdown();
            process.exit(0);
        });

        process.on('SIGTERM', async () => {
            console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM...');
            await this.shutdown();
            process.exit(0);
        });
    }

    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
     */
    async shutdown() {
        console.log('üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...');
        
        try {
            // –û—á–∏—Å—Ç–∫–∞ RTSP –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            await this.rtspManager.cleanup();
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
            this.server.close();
            
            // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π
            this.sessions.clear();
            
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', error);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = new AutonomousServer();
server.start(3000).catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
});

export default AutonomousServer;
