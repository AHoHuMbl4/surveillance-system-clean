/**
 * RTSP Decoder - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "Failed to open file" –∏ "No such file or directory"
 */

import { spawn } from 'child_process';
import { EventEmitter } from 'events';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class RTSPDecoder extends EventEmitter {
    constructor() {
        super();
        this.activeStreams = new Map();
        this.ffmpegPath = this.findFFmpeg();
        this.tempStreamsDir = path.join(__dirname, 'temp_streams');
        
        // –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å—Ä–∞–∑—É
        this.ensureMainDirectory();
        
        console.log('üé• RTSP Decoder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ—Ç–æ–∫–æ–≤: ${this.tempStreamsDir}`);
        console.log(`üîß FFmpeg –ø—É—Ç—å: ${this.ffmpegPath}`);
    }

    findFFmpeg() {
        const possiblePaths = [
            '/usr/bin/ffmpeg',
            '/usr/local/bin/ffmpeg', 
            'ffmpeg',
            path.join(__dirname, 'ffmpeg', 'linux-x64', 'ffmpeg'),
            path.join(__dirname, 'ffmpeg', 'win64', 'ffmpeg.exe'),
            path.join(__dirname, 'ffmpeg', 'macos-x64', 'ffmpeg'),
            path.join(__dirname, 'ffmpeg', 'macos-arm64', 'ffmpeg')
        ];

        for (const ffmpegPath of possiblePaths) {
            try {
                if (fs.existsSync(ffmpegPath)) {
                    fs.accessSync(ffmpegPath, fs.constants.X_OK);
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω FFmpeg: ${ffmpegPath}`);
                    return ffmpegPath;
                }
            } catch (error) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º
            }
        }

        console.log('‚ö†Ô∏è FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π');
        return 'ffmpeg';
    }

    ensureMainDirectory() {
        try {
            if (!fs.existsSync(this.tempStreamsDir)) {
                fs.mkdirSync(this.tempStreamsDir, { recursive: true });
                console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –≥–ª–∞–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${this.tempStreamsDir}`);
            }
            
            fs.accessSync(this.tempStreamsDir, fs.constants.W_OK);
            console.log('‚úÖ –ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏ –≤ temp_streams –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã');
            
        } catch (error) {
            console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            throw new Error(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å temp_streams: ${error.message}`);
        }
    }

    ensureStreamDirectory(streamId) {
        const streamDir = path.join(this.tempStreamsDir, streamId);
        
        try {
            if (!fs.existsSync(streamDir)) {
                fs.mkdirSync(streamDir, { recursive: true });
                console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ—Ç–æ–∫–∞: ${streamDir}`);
            }
            
            fs.accessSync(streamDir, fs.constants.W_OK);
            return streamDir;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${streamId}: ${error.message}`);
            throw new Error(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${streamId}: ${error.message}`);
        }
    }

    async startStream(streamId, rtspUrl, quality = 'low') {
        try {
            console.log(`üöÄ –ó–∞–ø—É—Å–∫ RTSP –ø–æ—Ç–æ–∫–∞: ${streamId}`);
            console.log(`üì° RTSP URL: ${rtspUrl}`);

            if (this.activeStreams.has(streamId)) {
                await this.stopStream(streamId);
            }

            // –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ—Ç–æ–∫–∞ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º FFmpeg
            const streamDir = this.ensureStreamDirectory(streamId);
            
            const playlistPath = path.join(streamDir, 'playlist.m3u8');
            const segmentPattern = path.join(streamDir, 'playlist%03d.ts');

            const ffmpegArgs = this.buildFFmpegArgs(rtspUrl, playlistPath, segmentPattern, quality);
            
            console.log(`üîß FFmpeg –∫–æ–º–∞–Ω–¥–∞: ${this.ffmpegPath} ${ffmpegArgs.join(' ')}`);
            
            const ffmpegProcess = spawn(this.ffmpegPath, ffmpegArgs, {
                stdio: ['ignore', 'pipe', 'pipe'],
                cwd: __dirname
            });

            const streamData = {
                id: streamId,
                process: ffmpegProcess,
                rtspUrl: rtspUrl,
                quality: quality,
                status: 'starting',
                startTime: Date.now(),
                streamDir: streamDir,
                playlistPath: playlistPath
            };

            this.activeStreams.set(streamId, streamData);
            this.setupFFmpegHandlers(streamData);
            
            console.log(`‚úÖ RTSP –ø–æ—Ç–æ–∫ ${streamId} –∑–∞–ø—É—â–µ–Ω`);
            return streamData;

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${streamId}:`, error);
            throw error;
        }
    }

    buildFFmpegArgs(rtspUrl, playlistPath, segmentPattern, quality) {
        const baseArgs = [
            '-rtsp_transport', 'tcp',
            '-allowed_media_types', 'video',
            '-i', rtspUrl,
            '-fflags', '+genpts',
            '-avoid_negative_ts', 'make_zero',
            '-max_delay', '0',
            '-reconnect', '1',
            '-reconnect_streamed', '1',
            '-reconnect_delay_max', '2'
        ];

        const qualityArgs = quality === 'high' ? [
            '-vf', 'scale=1920:1080',
            '-c:v', 'libx264',
            '-preset', 'veryfast',
            '-b:v', '2000k',
            '-maxrate', '2500k',
            '-bufsize', '3000k'
        ] : [
            '-vf', 'scale=854:480',
            '-c:v', 'libx264', 
            '-preset', 'veryfast',
            '-b:v', '800k',
            '-maxrate', '1000k',
            '-bufsize', '1500k'
        ];

        const hlsArgs = [
            '-f', 'hls',
            '-hls_time', '2',
            '-hls_list_size', '3',
            '-hls_flags', 'delete_segments',
            '-hls_segment_filename', segmentPattern,
            '-hls_start_number_source', 'epoch',
            '-y',
            playlistPath
        ];

        return [...baseArgs, ...qualityArgs, ...hlsArgs];
    }

    setupFFmpegHandlers(streamData) {
        const { process: ffmpegProcess, id: streamId } = streamData;

        ffmpegProcess.stderr.on('data', (data) => {
            const output = data.toString();
            
            if (output.includes('fps=') || output.includes('bitrate=')) {
                if (streamData.status === 'starting') {
                    console.log(`‚úÖ RTSP –ø–æ—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${streamId}`);
                    streamData.status = 'streaming';
                    this.emit('streamStarted', streamId);
                }
            }
            
            if (output.includes('Failed to open file') || output.includes('No such file or directory')) {
                console.error(`‚ùå FFmpeg error ${streamId}: –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏`);
                try {
                    this.ensureStreamDirectory(streamId);
                    console.log(`üîÑ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${streamId} –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞`);
                } catch (error) {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å: ${error.message}`);
                }
            }
            
            if (output.includes('error') || output.includes('failed')) {
                console.error(`‚ùå FFmpeg error ${streamId}:`, output.trim());
            }
        });

        ffmpegProcess.on('close', (code) => {
            console.log(`üõë FFmpeg –ø—Ä–æ—Ü–µ—Å—Å ${streamId} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
            this.activeStreams.delete(streamId);
            this.cleanupStream(streamData);
            this.emit('streamStopped', streamId, code);
        });

        ffmpegProcess.on('error', (error) => {
            console.error(`üí• –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ FFmpeg ${streamId}:`, error);
            streamData.status = 'error';
            this.emit('streamError', streamId, error);
        });
    }

    async stopStream(streamId) {
        const streamData = this.activeStreams.get(streamId);
        if (!streamData) {
            console.warn(`‚ö†Ô∏è –ü–æ—Ç–æ–∫ ${streamId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ ${streamId}`);
        
        if (streamData.process) {
            streamData.process.kill('SIGTERM');
            
            setTimeout(() => {
                if (!streamData.process.killed) {
                    streamData.process.kill('SIGKILL');
                }
            }, 5000);
        }

        this.cleanupStream(streamData);
        this.activeStreams.delete(streamId);
    }

    cleanupStream(streamData) {
        try {
            if (fs.existsSync(streamData.streamDir)) {
                const files = fs.readdirSync(streamData.streamDir);
                files.forEach(file => {
                    fs.unlinkSync(path.join(streamData.streamDir, file));
                });
                fs.rmdirSync(streamData.streamDir);
                
                console.log(`üßπ –û—á–∏—â–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è ${streamData.id}`);
            }
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ ${streamData.id}:`, error.message);
        }
    }

    getStreamsStatus() {
        const status = {};
        for (const [streamId, streamData] of this.activeStreams) {
            status[streamId] = {
                status: streamData.status,
                quality: streamData.quality,
                startTime: streamData.startTime,
                uptime: Date.now() - streamData.startTime,
                playlistExists: fs.existsSync(streamData.playlistPath)
            };
        }
        return status;
    }

    async stopAllStreams() {
        const streamIds = Array.from(this.activeStreams.keys());
        console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ (${streamIds.length})`);
        
        for (const streamId of streamIds) {
            await this.stopStream(streamId);
        }
    }
}

export default RTSPDecoder;
