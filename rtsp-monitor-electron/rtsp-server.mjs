/**
 * RTSP Server - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å ES imports
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTTP —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RTSP –ø–æ—Ç–æ–∫–æ–≤
 */

import http from 'http';
import express from 'express';
import cors from 'cors';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import RTSPDecoder from './rtsp-decoder.mjs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class RTSPServer {
    constructor() {
        this.app = express();
        this.server = null;
        this.rtspDecoder = new RTSPDecoder();
        this.port = 3000;
        
        this.setupMiddleware();
        this.setupRoutes();
        this.setupStaticFiles();
        
        console.log('üåê RTSP Server –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupMiddleware() {
        // CORS –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.app.use(cors({
            origin: '*',
            methods: ['GET', 'POST', 'PUT', 'DELETE'],
            allowedHeaders: ['Content-Type', 'Authorization']
        }));
        
        this.app.use(express.json());
        this.app.use(express.urlencoded({ extended: true }));
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        this.app.use((req, res, next) => {
            console.log(`üìä ${req.method} ${req.path}`);
            next();
        });
    }

    setupStaticFiles() {
        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã HLS –ø–æ—Ç–æ–∫–æ–≤
        this.app.use('/stream', express.static(path.join(__dirname, 'temp_streams'), {
            setHeaders: (res, filePath) => {
                if (filePath.endsWith('.m3u8')) {
                    res.setHeader('Content-Type', 'application/vnd.apple.mpegurl');
                    res.setHeader('Cache-Control', 'no-cache');
                } else if (filePath.endsWith('.ts')) {
                    res.setHeader('Content-Type', 'video/mp2t');
                    res.setHeader('Cache-Control', 'max-age=10');
                }
                
                // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HLS
                res.setHeader('Access-Control-Allow-Origin', '*');
                res.setHeader('Access-Control-Allow-Methods', 'GET');
            }
        }));
        
        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.app.use(express.static(__dirname));
    }

    setupRoutes() {
        // –û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ libs
        this.app.get("/libs/:file", (req, res) => {
            const filePath = path.join(__dirname, "libs", req.params.file);
            if (fs.existsSync(filePath)) {
                res.sendFile(filePath);
            } else {
                res.status(404).send("File not found");
            }
        });
        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        this.app.get('/', (req, res) => {
            const indexPath = path.join(__dirname, 'index.html');
            if (fs.existsSync(indexPath)) {
                res.sendFile(indexPath);
            } else {
                res.send(`
                    <h1>üé• RTSP Monitor Server</h1>
                    <p>–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}</p>
                    <p>API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É /api/</p>
                `);
            }
        });

        // API –º–∞—Ä—à—Ä—É—Ç—ã
        this.setupAPIRoutes();

        // –û—Ç–¥–∞—á–∞ HLS –ø–æ—Ç–æ–∫–æ–≤
        this.app.get("/stream/:streamId/:file", (req, res) => {
            const { streamId, file } = req.params;
            const filePath = path.join(this.rtspDecoder.streamDir, streamId, file);
            
            console.log(`üìÅ –ó–∞–ø—Ä–æ—Å HLS —Ñ–∞–π–ª–∞: ${filePath}`);
            
            if (!fs.existsSync(filePath)) {
                console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
                return res.status(404).send("File not found");
            }
            
            const ext = path.extname(file);
            let contentType = "application/octet-stream";
            
            if (ext === ".m3u8") {
                contentType = "application/vnd.apple.mpegurl";
            } else if (ext === ".ts") {
                contentType = "video/mp2t";
            }
            
            res.setHeader("Content-Type", contentType);
            res.setHeader("Cache-Control", "no-cache");
            res.setHeader("Access-Control-Allow-Origin", "*");
            
            const stream = fs.createReadStream(filePath);
            stream.on("error", (error) => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error}`);
                res.status(500).send("Internal server error");
            });
            
            stream.pipe(res);
        });
    }

    setupAPIRoutes() {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä
        this.app.get('/api/apartments', (req, res) => {
            const apartments = this.getTestApartments();
            res.json(apartments);
        });

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä
        this.app.get('/api/cameras', (req, res) => {
            const cameras = this.getTestCameras();
            res.json(cameras);
        });

        // –ó–∞–ø—É—Å–∫ RTSP –ø–æ—Ç–æ–∫–∞
        this.app.post('/api/stream/start', async (req, res) => {
            try {
                const { streamId, rtspUrl, quality = 'low' } = req.body;
                
                if (!streamId || !rtspUrl) {
                    return res.status(400).json({
                        error: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã streamId –∏ rtspUrl'
                    });
                }

                console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞: ${streamId} (${quality})`);
                
                const streamData = await this.rtspDecoder.startStream(streamId, rtspUrl, quality);
                
                res.json({
                    success: true,
                    streamId: streamId,
                    quality: quality,
                    message: '–ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                    streamData: {
                        status: streamData.status,
                        startTime: streamData.startTime
                    }
                });

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞:`, error);
                res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞',
                    details: error.message
                });
            }
        });

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RTSP –ø–æ—Ç–æ–∫–∞
        this.app.post('/api/stream/stop', async (req, res) => {
            try {
                const { streamId } = req.body;
                
                if (!streamId) {
                    return res.status(400).json({
                        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä streamId'
                    });
                }

                console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞: ${streamId}`);
                
                await this.rtspDecoder.stopStream(streamId);
                
                res.json({
                    success: true,
                    streamId: streamId,
                    message: '–ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
                });

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞:`, error);
                res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞',
                    details: error.message
                });
            }
        });

        // –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        this.app.get('/api/streams/status', (req, res) => {
            try {
                const status = this.rtspDecoder.getStreamsStatus();
                res.json({
                    success: true,
                    streams: status,
                    count: Object.keys(status).length
                });
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:`, error);
                res.status(500).json({
                    error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ç–æ–∫–æ–≤',
                    details: error.message
                });
            }
        });

        // –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
        this.app.get('/api/health', (req, res) => {
            res.json({
                status: 'OK',
                timestamp: new Date().toISOString(),
                uptime: process.uptime(),
                version: '1.0.0'
            });
        });
    }

    getTestApartments() {
        return [
            {
                id: 1,
                apartment_name: '–¢–∞–π–ª–∞–Ω–¥',
                apartment_number: '91'
            },
            {
                id: 2,
                apartment_name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                apartment_number: '12–ê'
            }
        ];
    }

    getTestCameras() {
        return [
            {
                id: 1,
                camera_name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–º–µ—Ä–∞ 1',
                apartment_name: '–¢–∞–π–ª–∞–Ω–¥',
                rtsp_link: 'rtsp://185.70.184.101:8554/cam91-99',
                rtsp_link_high: 'rtsp://185.70.184.101:8554/cam91-99',
                status: 'offline'
            },
            {
                id: 2,
                camera_name: 'Demo BigBuckBunny',
                apartment_name: '–¢–∞–π–ª–∞–Ω–¥',
                rtsp_link: 'rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4',
                rtsp_link_high: 'rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_175k.mp4',
                status: 'offline'
            },
            {
                id: 3,
                camera_name: '–ö–∞–º–µ—Ä–∞ —Ö–æ–ª–ª–∞',
                apartment_name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                rtsp_link: 'rtsp://185.70.184.101:8554/cam91-99',
                status: 'offline'
            }
        ];
    }

    async start() {
        return new Promise((resolve, reject) => {
            this.server = this.app.listen(this.port, '0.0.0.0', (error) => {
                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
                    reject(error);
                } else {
                    console.log(`‚úÖ RTSP Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${this.port}`);
                    console.log(`üì° RTSP Decoder –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Ç–æ–∫–æ–≤`);
                    resolve();
                }
            });

            this.server.on('error', (error) => {
                if (error.code === 'EADDRINUSE') {
                    console.error(`‚ùå –ü–æ—Ä—Ç ${this.port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
                }
                reject(error);
            });
        });
    }

    async stop() {
        console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RTSP —Å–µ—Ä–≤–µ—Ä–∞...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ RTSP –ø–æ—Ç–æ–∫–∏
        try {
            await this.rtspDecoder.stopAllStreams();
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ RTSP –ø–æ—Ç–æ–∫–æ–≤:', error);
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        if (this.server) {
            return new Promise((resolve) => {
                this.server.close(() => {
                    console.log('‚úÖ RTSP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                    resolve();
                });
            });
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    const server = new RTSPServer();
    
    server.start().catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
        process.exit(1);
    });

    // Graceful shutdown
    process.on('SIGTERM', async () => {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
        await server.stop();
        process.exit(0);
    });

    process.on('SIGINT', async () => {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
        await server.stop();
        process.exit(0);
    });
}

export default RTSPServer;
