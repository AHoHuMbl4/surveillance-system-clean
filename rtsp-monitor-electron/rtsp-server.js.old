/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RTSP —Å–µ—Ä–≤–µ—Ä —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
 */

const http = require('http');
const path = require('path');
const fs = require('fs');
const OptimizedRTSPDecoder = require('./optimized-rtsp-decoder');

class OptimizedRTSPServer {
    constructor() {
        this.rtspDecoder = new OptimizedRTSPDecoder();
        this.server = null;
        
        this.config = {
            cameras: [
                { 
                    id: 1, 
                    camera_name: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–º–µ—Ä–∞ (—Ä–∞–±–æ—á–∞—è)", 
                    apartment_name: "–¢–µ—Å—Ç –∑–æ–Ω–∞", 
                    rtsp_main: "rtsp://185.70.184.101:8554/cam91-99", 
                    rtsp_sub: "rtsp://185.70.184.101:8554/cam91-99" 
                },
                { 
                    id: 2, 
                    camera_name: "–ö–∞–º–µ—Ä–∞ Hikvision 1", 
                    apartment_name: "–û—Ñ–∏—Å 1", 
                    rtsp_main: "rtsp://admin:Hikvision@192.168.12.107:554/h264", 
                    rtsp_sub: "rtsp://admin:Hikvision@192.168.12.107:554/h264" 
                },
                { 
                    id: 3, 
                    camera_name: "–ö–∞–º–µ—Ä–∞ Hikvision 2", 
                    apartment_name: "–û—Ñ–∏—Å 2", 
                    rtsp_main: "rtsp://admin:Hikvision@192.168.11.107:554/h264", 
                    rtsp_sub: "rtsp://admin:Hikvision@192.168.11.107:554/h264" 
                },
                { 
                    id: 4, 
                    camera_name: "–ö–∞–º–µ—Ä–∞ Hikvision 3", 
                    apartment_name: "–û—Ñ–∏—Å 3", 
                    rtsp_main: "rtsp://admin:Hikvision@192.168.29.107:554/h264", 
                    rtsp_sub: "rtsp://admin:Hikvision@192.168.29.107:554/h264" 
                },
                { 
                    id: 5, 
                    camera_name: "–ö–∞–º–µ—Ä–∞ Hikvision 4", 
                    apartment_name: "–û—Ñ–∏—Å 4", 
                    rtsp_main: "rtsp://admin:Hikvision@192.168.28.107:554/h264", 
                    rtsp_sub: "rtsp://admin:Hikvision@192.168.28.107:554/h264" 
                }
            ]
        };

        this.setupDecoderHandlers();
    }

    setupDecoderHandlers() {
        this.rtspDecoder.on('streamStarted', (streamId) => {
            console.log(`‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω: ${streamId}`);
        });

        this.rtspDecoder.on('streamError', ({ streamId, error }) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞ ${streamId}:`, error);
        });
    }

    createServer() {
        return http.createServer(async (req, res) => {
            try {
                await this.handleRequest(req, res);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
                this.sendError(res, 500, 'Internal Server Error');
            }
        });
    }

    async handleRequest(req, res) {
        const url = new URL(req.url, `http://localhost:3000`);
        const pathname = url.pathname;

        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

        if (req.method === 'OPTIONS') {
            res.writeHead(200);
            res.end();
            return;
        }

        console.log(`üì° ${req.method} ${pathname}`);

        if (pathname === '/') {
            await this.serveIndexHTML(res);
        } else if (pathname === '/test') {
    const testPath = path.join(__dirname, 'test-interface.html');
    if (fs.existsSync(testPath)) {
        const content = fs.readFileSync(testPath, 'utf8');
        res.setHeader('Content-Type', 'text/html; charset=utf-8');
        res.writeHead(200);
        res.end(content);
    } else {
        this.sendError(res, 404, 'Test interface not found');
    }
        } else if (pathname === '/api/cameras') {
            this.sendJSON(res, this.config.cameras);
        } else if (pathname === '/api/stream/start') {
            await this.handleStartStream(req, res);
        } else if (pathname === '/api/stream/stop') {
            await this.handleStopStream(req, res);
        } else if (pathname === '/api/streams/status') {
        } else if (pathname === "/test") {
            const testPath = path.join(__dirname, "test-interface.html");
            if (fs.existsSync(testPath)) {
                const content = fs.readFileSync(testPath, "utf8");
                res.setHeader("Content-Type", "text/html; charset=utf-8");
                res.writeHead(200);
                res.end(content);
            } else {
                this.sendError(res, 404, "Test interface not found");
            }
            const status = this.rtspDecoder.getStreamsStatus();
            this.sendJSON(res, status);
        } else {
            this.sendError(res, 404, 'Not Found');
        }
    }

    async serveIndexHTML(res) {
        const indexPath = path.join(__dirname, 'index.html');
        
        try {
            if (fs.existsSync(indexPath)) {
                const content = fs.readFileSync(indexPath, 'utf8');
                res.setHeader('Content-Type', 'text/html; charset=utf-8');
                res.writeHead(200);
                res.end(content);
            } else {
                res.setHeader('Content-Type', 'text/html; charset=utf-8');
                res.writeHead(200);
                res.end(this.getDefaultHTML());
            }
        } catch (error) {
            this.sendError(res, 500, 'Error loading interface');
        }
    }

    getDefaultHTML() {
        return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>RTSP Monitor - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç</title>
    <style>
        body { font-family: Arial, sans-serif; background: #1a1a1a; color: white; padding: 20px; }
        .container { max-width: 1200px; margin: 0 auto; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; }
        .camera { background: #2c3e50; padding: 20px; border-radius: 10px; }
        .video-container { height: 300px; background: #34495e; border-radius: 8px; margin: 15px 0; }
        .camera-video { width: 100%; height: 100%; object-fit: cover; border-radius: 8px; }
        .placeholder { display: flex; align-items: center; justify-content: center; height: 100%; color: #bdc3c7; }
        .btn { background: #3498db; color: white; border: none; padding: 10px 15px; border-radius: 5px; margin: 5px; cursor: pointer; }
        .btn:hover { background: #2980b9; }
        .btn.stop { background: #e74c3c; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üé• RTSP Monitor - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</h1>
        <p>‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞. MJPEG streaming –∞–∫—Ç–∏–≤–µ–Ω.</p>
        
        <div class="grid" id="cameras"></div>
    </div>

    <script>
        let cameras = [];
        let activeStreams = new Map();

        async function loadCameras() {
            try {
                const response = await fetch('/api/cameras');
                cameras = await response.json();
                renderCameras();
                console.log('‚úÖ –ö–∞–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', cameras.length);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            }
        }

        function renderCameras() {
            const container = document.getElementById('cameras');
            container.innerHTML = '';

            cameras.forEach(camera => {
                const cameraDiv = document.createElement('div');
                cameraDiv.className = 'camera';
                cameraDiv.innerHTML = \`
                    <h3>\${camera.camera_name}</h3>
                    <p>–ö–≤–∞—Ä—Ç–∏—Ä–∞: \${camera.apartment_name}</p>
                    <div class="video-container">
                        <img class="camera-video" id="video-\${camera.id}" style="display: none;" />
                        <div class="placeholder" id="placeholder-\${camera.id}">
                            üìπ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
                        </div>
                    </div>
                    <button class="btn" onclick="startStream(\${camera.id}, 'sub')">üì∫ 480p</button>
                    <button class="btn" onclick="startStream(\${camera.id}, 'main')">üñ•Ô∏è 1080p</button>
                    <button class="btn stop" onclick="stopStream(\${camera.id})">‚èπÔ∏è –°—Ç–æ–ø</button>
                \`;
                container.appendChild(cameraDiv);
            });
        }

        async function startStream(cameraId, quality) {
            const camera = cameras.find(c => c.id === cameraId);
            if (!camera) return;

            console.log(\`üì° –ó–∞–ø—É—Å–∫: \${camera.camera_name} (\${quality})\`);
            
            try {
                const response = await fetch('/api/stream/start', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        cameraId, 
                        rtspUrl: quality === 'main' ? camera.rtsp_main : camera.rtsp_sub,
                        quality 
                    })
                });

                const result = await response.json();

                if (result.success) {
                    console.log(\`‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω: \${result.url}\`);
                    
                    const video = document.getElementById(\`video-\${cameraId}\`);
                    const placeholder = document.getElementById(\`placeholder-\${cameraId}\`);
                    
                    if (video && placeholder) {
                        video.src = result.url;
                        video.style.display = 'block';
                        placeholder.style.display = 'none';
                        
                        activeStreams.set(cameraId, result);
                    }
                } else {
                    console.error('‚ùå –û—à–∏–±–∫–∞:', result.error);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
            }
        }

        async function stopStream(cameraId) {
            const streamData = activeStreams.get(cameraId);
            if (!streamData) return;

            try {
                const response = await fetch('/api/stream/stop', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ streamId: streamData.streamId })
                });

                const result = await response.json();

                if (result.success) {
                    console.log(\`‚úÖ –ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\`);
                    
                    const video = document.getElementById(\`video-\${cameraId}\`);
                    const placeholder = document.getElementById(\`placeholder-\${cameraId}\`);
                    
                    if (video && placeholder) {
                        video.src = '';
                        video.style.display = 'none';
                        placeholder.style.display = 'block';
                        
                        activeStreams.delete(cameraId);
                    }
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
            }
        }

        document.addEventListener('DOMContentLoaded', loadCameras);
    </script>
</body>
</html>
        `;
    }

    async handleStartStream(req, res) {
        if (req.method !== 'POST') {
            this.sendError(res, 405, 'Method Not Allowed');
            return;
        }

        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });

        req.on('end', async () => {
            try {
                const { cameraId, rtspUrl, quality = 'sub' } = JSON.parse(body);
                
                console.log(`üì° API –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞: ${cameraId} (${quality})`);

                const streamId = `stream-${cameraId}-${quality}-${Date.now()}`;
                const streamData = await this.rtspDecoder.startStreamOptimized(streamId, rtspUrl, quality);

                this.sendJSON(res, {
                    success: true,
                    streamId: streamData.streamId,
                    url: streamData.url,
                    quality: quality
                });

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—É—Å–∫–∞:', error);
                this.sendJSON(res, {
                    success: false,
                    error: error.message
                }, 500);
            }
        });
    }

    async handleStopStream(req, res) {
        if (req.method !== 'POST') {
            this.sendError(res, 405, 'Method Not Allowed');
            return;
        }

        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });

        req.on('end', async () => {
            try {
                const { streamId } = JSON.parse(body);
                
                console.log(`üõë API –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞: ${streamId}`);
                await this.rtspDecoder.stopStream(streamId);

                this.sendJSON(res, {
                    success: true,
                    message: 'Stream stopped'
                });

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ API –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
                this.sendJSON(res, {
                    success: false,
                    error: error.message
                }, 500);
            }
        });
    }

    sendJSON(res, data, statusCode = 200) {
        res.setHeader('Content-Type', 'application/json; charset=utf-8');
        res.writeHead(statusCode);
        res.end(JSON.stringify(data));
    }

    sendError(res, statusCode, message) {
        res.setHeader('Content-Type', 'application/json; charset=utf-8');
        res.writeHead(statusCode);
        res.end(JSON.stringify({ error: message }));
    }

    start(port = 3000) {
        this.server = this.createServer();

        this.server.listen(port, () => {
            console.log(`üåê –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RTSP Server: http://localhost:${port}`);
            console.log(`üé¨ MJPEG streaming –≥–æ—Ç–æ–≤`);
            console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞–º–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã`);
        });

        this.server.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        });

        process.on('SIGINT', async () => {
            console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤...');
            await this.rtspDecoder.stopAllStreams();
            if (this.server) {
                this.server.close();
            }
            process.exit(0);
        });

        return this.server;
    }
}

if (require.main === module) {
    const server = new OptimizedRTSPServer();
    server.start(3000);
}

module.exports = OptimizedRTSPServer;
