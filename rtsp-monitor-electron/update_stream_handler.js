// –ü–∞—Ç—á –¥–ª—è handleStreamStart –≤ autonomous-server.js

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è handleStreamStart
function updateStreamHandler() {
    const serverFile = 'autonomous-server.js';
    let content = fs.readFileSync(serverFile, 'utf8');
    
    // –ù–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å handleStreamStart
    const newHandler = `
    async handleStreamStart(res, data) {
        try {
            const { streamId, rtspUrl, quality = 'low' } = data;
            
            console.log(\`üé¨ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞: \${streamId}, –∫–∞—á–µ—Å—Ç–≤–æ: \${quality}\`);
            
            if (!streamId || !rtspUrl) {
                return this.sendError(res, 400, 'streamId –∏ rtspUrl –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            }
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ—Ç–æ–∫–∞
            const streamPath = path.join(__dirname, 'temp_streams', streamId);
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (fs.existsSync(streamPath)) {
                console.log(\`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: \${streamPath}\`);
                fs.rmSync(streamPath, { recursive: true, force: true });
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            fs.mkdirSync(streamPath, { recursive: true });
            console.log(\`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: \${streamPath}\`);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            const qualitySettings = {
                low: {
                    scale: '854:480',
                    bitrate: '800k',
                    maxrate: '1000k',
                    bufsize: '1500k',
                    preset: 'veryfast'
                },
                high: {
                    scale: '1920:1080',
                    bitrate: '3000k',
                    maxrate: '4000k',
                    bufsize: '6000k',
                    preset: 'fast'
                }
            };
            
            const settings = qualitySettings[quality] || qualitySettings.low;
            
            // –ö–æ–º–∞–Ω–¥–∞ FFmpeg
            const ffmpegPath = this.getFFmpegPath();
            const outputPath = path.join(streamPath, 'playlist.m3u8');
            
            const ffmpegArgs = [
                '-rtsp_transport', 'tcp',
                '-i', rtspUrl,
                '-fflags', '+genpts',
                '-avoid_negative_ts', 'make_zero',
                '-max_delay', '0',
                '-reconnect', '1',
                '-reconnect_streamed', '1',
                '-reconnect_delay_max', '2',
                '-vf', \`scale=\${settings.scale}\`,
                '-c:v', 'libx264',
                '-preset', settings.preset,
                '-b:v', settings.bitrate,
                '-maxrate', settings.maxrate,
                '-bufsize', settings.bufsize,
                '-f', 'hls',
                '-hls_time', '2',
                '-hls_list_size', '5',
                '-hls_flags', 'delete_segments',
                '-hls_segment_filename', path.join(streamPath, 'segment%03d.ts'),
                '-hls_allow_cache', '1',
                '-y', outputPath
            ];
            
            console.log(\`üöÄ –ó–∞–ø—É—Å–∫ FFmpeg: \${ffmpegPath}\`);
            console.log(\`üìù –ê—Ä–≥—É–º–µ–Ω—Ç—ã: \${ffmpegArgs.join(' ')}\`);
            
            // –ó–∞–ø—É—Å–∫ FFmpeg
            const { spawn } = require('child_process');
            const ffmpeg = spawn(ffmpegPath, ffmpegArgs);
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            if (!this.activeStreams) {
                this.activeStreams = new Map();
            }
            
            this.activeStreams.set(streamId, {
                process: ffmpeg,
                streamId,
                rtspUrl,
                quality,
                startTime: Date.now(),
                outputPath
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ FFmpeg
            ffmpeg.stdout.on('data', (data) => {
                console.log(\`[FFmpeg \${streamId}]: \${data}\`);
            });
            
            ffmpeg.stderr.on('data', (data) => {
                const message = data.toString();
                if (message.includes('error') || message.includes('Error')) {
                    console.error(\`‚ùå [FFmpeg \${streamId}]: \${message}\`);
                } else {
                    console.log(\`[FFmpeg \${streamId}]: \${message}\`);
                }
            });
            
            ffmpeg.on('close', (code) => {
                console.log(\`‚èπÔ∏è FFmpeg –ø—Ä–æ—Ü–µ—Å—Å \${streamId} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º \${code}\`);
                this.activeStreams.delete(streamId);
            });
            
            // –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
            this.sendJSON(res, {
                success: true,
                streamId,
                quality,
                message: '–ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                streamData: {
                    status: 'starting',
                    startTime: Date.now()
                }
            });
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞:', error);
            this.sendError(res, 500, error.message);
        }
    }`;
    
    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–º–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω');
}

// –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
updateStreamHandler();
