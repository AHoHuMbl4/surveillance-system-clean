--- –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ ---

        // –û—Ç–¥–∞—á–∞ HLS –ø–æ—Ç–æ–∫–æ–≤
        this.app.get('/stream/:streamId/:file', (req, res) => {
            const { streamId, file } = req.params;
            const filePath = path.join(this.rtspDecoder.streamDir, streamId, file);
            
            console.log(`üìÅ –ó–∞–ø—Ä–æ—Å HLS —Ñ–∞–π–ª–∞: ${filePath}`);
            
            if (!fs.existsSync(filePath)) {
                console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
                return res.status(404).send('File not found');
            }
            
            const ext = path.extname(file);
            let contentType = 'application/octet-stream';
            
            if (ext === '.m3u8') {
                contentType = 'application/vnd.apple.mpegurl';
            } else if (ext === '.ts') {
                contentType = 'video/mp2t';
            }
            
            res.setHeader('Content-Type', contentType);
            res.setHeader('Cache-Control', 'no-cache');
            res.setHeader('Access-Control-Allow-Origin', '*');
            
            const stream = fs.createReadStream(filePath);
            stream.on('error', (error) => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error}`);
                res.status(500).send('Internal server error');
            });
            
            stream.pipe(res);
        });
