<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üé• –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è</title>
    
    <!-- HLS.js –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ - –î–û–ë–ê–í–õ–ï–ù–û -->
    <script src="https://cdn.jsdelivr.net/npm/hls.js@1.4.10/dist/hls.min.js"></script>
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: rgba(255, 255, 255, 0.95);
            padding: 15px 30px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        h1 {
            color: #333;
            font-size: 24px;
            font-weight: 600;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(45deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .navigation {
            display: flex;
            gap: 10px;
            margin-left: 20px;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover, .btn-primary.active {
            background: #5a67d8;
            transform: translateY(-2px);
        }

        .btn-admin {
            background: #ff6b35;
            color: white;
        }

        .btn-admin:hover {
            background: #e55a2b;
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-success:hover {
            background: #218838;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-danger:hover {
            background: #c82333;
        }

        /* –°–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–æ–ª–µ–π */
        .admin-only {
            display: none;
        }

        .user-admin .admin-only {
            display: block;
        }

        .user-admin .admin-inline {
            display: inline-block;
        }

        /* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —ç–∫—Ä–∞–Ω–æ–≤ */
        .screen {
            display: none;
        }

        .screen.active {
            display: block;
        }

        /* –≠–∫—Ä–∞–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–º–µ—Ä */
        .monitoring-screen {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .apartment-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 10px;
        }

        .apartment-info h2 {
            color: #333;
            margin-bottom: 5px;
        }

        .apartment-info p {
            color: #666;
            font-size: 14px;
        }

        .apartment-nav {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .apartment-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 10px;
        }

        .apartment-btn {
            padding: 8px 16px;
            border: 2px solid #ddd;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }

        .apartment-btn.active {
            border-color: #667eea;
            background: #667eea;
            color: white;
        }

        .apartment-btn:hover {
            border-color: #667eea;
        }

        /* –°–µ—Ç–∫–∞ –∫–∞–º–µ—Ä */
        .camera-grid {
            display: grid;
            gap: 15px;
            margin-top: 20px;
            width: 100%;
            height: 600px;
        }

        /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å–µ—Ç–∫–∏ */
        .camera-grid.cameras-1 { grid-template-columns: 1fr; }
        .camera-grid.cameras-2 { grid-template-columns: 1fr 1fr; }
        .camera-grid.cameras-3 { grid-template-columns: 1fr 1fr 1fr; }
        .camera-grid.cameras-4 { grid-template-columns: 1fr 1fr; grid-template-rows: 1fr 1fr; }
        .camera-grid.cameras-5,
        .camera-grid.cameras-6 { grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 1fr 1fr; }
        .camera-grid.cameras-7,
        .camera-grid.cameras-8,
        .camera-grid.cameras-9 { grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 1fr 1fr 1fr; }
        .camera-grid.cameras-10,
        .camera-grid.cameras-11,
        .camera-grid.cameras-12 { grid-template-columns: 1fr 1fr 1fr 1fr; grid-template-rows: 1fr 1fr 1fr; }
        .camera-grid.cameras-13,
        .camera-grid.cameras-14,
        .camera-grid.cameras-15,
        .camera-grid.cameras-16 { grid-template-columns: 1fr 1fr 1fr 1fr; grid-template-rows: 1fr 1fr 1fr 1fr; }

        .camera-slot {
            position: relative;
            background: #000;
            border-radius: 8px;
            overflow: hidden;
            cursor: pointer;
            transition: transform 0.3s;
            min-height: 120px;
        }

        .camera-slot:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
        }

        .camera-video {
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, #2c3e50, #34495e);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 48px;
            color: #ecf0f1;
        }

        /* –î–û–ë–ê–í–õ–ï–ù–û: –°—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ */
        .camera-video-element {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: none;
        }

        .camera-placeholder {
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, #2c3e50, #34495e);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 48px;
            color: #ecf0f1;
            flex-direction: column;
        }

        .loading-spinner {
            border: 3px solid rgba(255,255,255,0.3);
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin-bottom: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .camera-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0,0,0,0.8));
            padding: 15px 10px 10px;
            color: white;
        }

        .camera-name {
            font-weight: bold;
            font-size: 14px;
            margin-bottom: 3px;
        }

        .camera-status {
            font-size: 11px;
            opacity: 0.8;
        }

        .camera-controls {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 5px;
        }

        .camera-btn {
            width: 30px;
            height: 30px;
            border: none;
            border-radius: 6px;
            background: rgba(0,0,0,0.7);
            color: white;
            cursor: pointer;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
        }

        .camera-btn:hover {
            background: rgba(0,0,0,0.9);
            transform: scale(1.1);
        }

        .camera-btn.audio-active {
            background: #28a745;
        }

        .status-indicator {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #28a745;
            animation: pulse 2s infinite;
        }

        .status-indicator.offline {
            background: #dc3545;
            animation: none;
        }

        .status-indicator.connecting {
            background: #ffc107;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        /* –ê–≤—Ç–æ—Ü–∏–∫–ª –∫–æ–Ω—Ç—Ä–æ–ª—ã */
        .autocycle-controls {
            display: flex;
            gap: 10px;
            align-items: center;
            background: #e9ecef;
            padding: 10px 15px;
            border-radius: 8px;
            margin-top: 15px;
        }

        .autocycle-controls label {
            font-size: 14px;
            font-weight: 500;
        }

        .autocycle-controls select {
            padding: 5px 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }

        /* –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º */
        .fullscreen-modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.95);
        }

        .fullscreen-modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .fullscreen-content {
            position: relative;
            width: 90%;
            height: 90%;
            background: #000;
            border-radius: 15px;
            overflow: hidden;
        }

        .fullscreen-video {
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, #2c3e50, #34495e);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 120px;
            color: #ecf0f1;
        }

        .fullscreen-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0,0,0,0.8));
            padding: 30px;
            color: white;
        }

        .fullscreen-title {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .fullscreen-info {
            font-size: 16px;
            opacity: 0.8;
            margin-bottom: 20px;
        }

        .fullscreen-controls {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .volume-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .volume-slider {
            width: 100px;
        }

        .close-fullscreen {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 50px;
            height: 50px;
            border: none;
            border-radius: 50%;
            background: rgba(255,255,255,0.2);
            color: white;
            font-size: 24px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .close-fullscreen:hover {
            background: rgba(255,255,255,0.4);
        }

        /* –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã */
        .admin-screen {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        /* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #eee;
        }

        .modal-title {
            font-size: 24px;
            font-weight: 600;
            color: #333;
        }

        .close {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            color: #999;
        }

        .close:hover {
            color: #333;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: #333;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        /* –¢–∞–±–ª–∏—Ü—ã */
        .table-container {
            margin-top: 20px;
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
            color: #333;
        }

        tr:hover {
            background: #f8f9fa;
        }

        .btn-small {
            padding: 4px 8px;
            font-size: 12px;
            margin: 0 2px;
        }

        /* –í–∫–ª–∞–¥–∫–∏ */
        .tabs {
            display: flex;
            background: #f8f9fa;
            border-radius: 8px;
            padding: 4px;
            margin-bottom: 20px;
        }

        .tab {
            flex: 1;
            padding: 10px 20px;
            text-align: center;
            cursor: pointer;
            border-radius: 6px;
            transition: all 0.3s;
            font-weight: 500;
        }

        .tab.active {
            background: #667eea;
            color: white;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* –°—Ç–∞—Ç—É—Å—ã –∫–∞–º–µ—Ä */
        .camera-status-badge {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
        }

        .camera-status-badge.online {
            background: #d4edda;
            color: #155724;
        }

        .camera-status-badge.offline {
            background: #f8d7da;
            color: #721c24;
        }

        .camera-status-badge.testing {
            background: #fff3cd;
            color: #856404;
        }

        /* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 2000;
            transform: translateX(100%);
            transition: transform 0.3s;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: #28a745;
        }

        .notification.error {
            background: #dc3545;
        }

        .notification.warning {
            background: #ffc107;
            color: #333;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
        <div class="header">
            <h1>üé• –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è</h1>
            <div class="user-info">
                <div class="user-avatar" id="userAvatar">A</div>
                <div>
                    <div id="userName">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</div>
                    <div id="userRole" style="font-size: 12px; color: #666;">–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø</div>
                </div>
                <div class="navigation">
                    <button class="btn btn-primary active" onclick="showScreen('monitoring')" id="monitoringBtn">
                        üìπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    </button>
                    <button class="btn btn-admin admin-only" onclick="showScreen('admin')" id="adminBtn">
                        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                    </button>
                </div>
                <button class="btn btn-secondary" onclick="logout()">–í—ã–π—Ç–∏</button>
            </div>
        </div>

        <!-- –≠–∫—Ä–∞–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–º–µ—Ä -->
        <div id="monitoringScreen" class="screen active">
            <div class="monitoring-screen">
                <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏ -->
                <div class="apartment-controls">
                    <div class="apartment-info">
                        <h2 id="apartmentTitle">–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –ü—É—à–∫–∏–Ω–∞</h2>
                        <p id="apartmentDescription">–ö–∞–º–µ—Ä: 4 | –ö–≤–∞—Ä—Ç–∏—Ä–∞ 1 –∏–∑ 3</p>
                    </div>
                    <div class="apartment-nav">
                        <button class="btn btn-secondary" onclick="previousApartment()">‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è</button>
                        <button class="btn btn-primary" onclick="toggleAutocycle()" id="autocycleBtn">‚è∏Ô∏è –ü–∞—É–∑–∞</button>
                        <button class="btn btn-secondary" onclick="nextApartment()">–°–ª–µ–¥—É—é—â–∞—è ‚Üí</button>
                    </div>
                </div>

                <!-- –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä -->
                <div class="apartment-buttons" id="apartmentButtons">
                    <!-- –ö–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>

                <!-- –°–µ—Ç–∫–∞ –∫–∞–º–µ—Ä -->
                <div class="camera-grid cameras-4" id="cameraGrid">
                    <!-- –ö–∞–º–µ—Ä—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>

                <!-- –ö–æ–Ω—Ç—Ä–æ–ª—ã –∞–≤—Ç–æ—Ü–∏–∫–ª–∞ -->
                <div class="autocycle-controls">
                    <label>–ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ:</label>
                    <select id="cycleInterval" onchange="updateCycleInterval()">
                        <option value="5">–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫</option>
                        <option value="10">–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫</option>
                        <option value="15" selected>–∫–∞–∂–¥—ã–µ 15 —Å–µ–∫</option>
                        <option value="30">–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫</option>
                        <option value="60">–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É</option>
                    </select>
                    <span id="cycleStatus">–ê–∫—Ç–∏–≤–Ω–æ</span>
                </div>
            </div>
        </div>

        <!-- –í–°–Ø –û–°–¢–ê–õ–¨–ù–ê–Ø –ê–î–ú–ò–ù–ö–ê –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô... -->
        <!-- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–∫—Ä–∞–Ω -->
        <div id="adminScreen" class="screen admin-only">
            <div class="admin-screen">
                <h2>‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>

                <!-- –í–∫–ª–∞–¥–∫–∏ -->
                <div class="tabs">
                    <div class="tab active" onclick="switchTab('apartments')">–ö–≤–∞—Ä—Ç–∏—Ä—ã</div>
                    <div class="tab" onclick="switchTab('cameras')">–ö–∞–º–µ—Ä—ã</div>
                    <div class="tab" onclick="switchTab('settings')">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</div>
                </div>

                <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏ -->
                <div id="apartments-tab" class="tab-content active">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏</h3>
                        <button class="btn btn-success" onclick="openAddApartmentModal()">
                            ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É
                        </button>
                    </div>

                    <div class="table-container">
                        <table id="apartmentsTable">
                            <thead>
                                <tr>
                                    <th>‚Ññ</th>
                                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                    <th>–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã</th>
                                    <th>–ö–∞–º–µ—Ä</th>
                                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–∞–º–∏ -->
                <div id="cameras-tab" class="tab-content">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–∞–º–∏</h3>
                        <button class="btn btn-success" onclick="openAddCameraModal()">
                            ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É
                        </button>
                    </div>

                    <div class="table-container">
                        <table id="camerasTable">
                            <thead>
                                <tr>
                                    <th>‚Ññ</th>
                                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                    <th>–ö–≤–∞—Ä—Ç–∏—Ä–∞</th>
                                    <th>RTSP —Å—Å—ã–ª–∫–∞</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -->
                <div id="settings-tab" class="tab-content">
                    <h3>–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                    
                    <div class="form-group">
                        <label>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥—Ä—É–ø–ø (—Å–µ–∫—É–Ω–¥—ã):</label>
                        <select id="rotationInterval">
                            <option value="5">5 —Å–µ–∫—É–Ω–¥</option>
                            <option value="10">10 —Å–µ–∫—É–Ω–¥</option>
                            <option value="15" selected>15 —Å–µ–∫—É–Ω–¥</option>
                            <option value="30">30 —Å–µ–∫—É–Ω–¥</option>
                            <option value="60">1 –º–∏–Ω—É—Ç–∞</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã):</label>
                        <input type="number" id="connectionTimeout" value="10" min="5" max="60">
                    </div>

                    <div class="form-group">
                        <label>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</label>
                        <input type="number" id="maxRetryAttempts" value="5" min="1" max="20">
                    </div>

                    <div class="form-group">
                        <label>–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ –∫–∞–º–µ—Ä:</label>
                        <select id="gridSize">
                            <option value="9">3√ó3 (9 –∫–∞–º–µ—Ä)</option>
                            <option value="12">4√ó3 (12 –∫–∞–º–µ—Ä)</option>
                            <option value="16" selected>4√ó4 (16 –∫–∞–º–µ—Ä)</option>
                            <option value="20">5√ó4 (20 –∫–∞–º–µ—Ä)</option>
                        </select>
                    </div>

                    <button class="btn btn-success" onclick="saveSettings()">
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º -->
    <div id="fullscreenModal" class="fullscreen-modal">
        <div class="fullscreen-content">
            <button class="close-fullscreen" onclick="closeFullscreen()">√ó</button>
            <div class="fullscreen-video" id="fullscreenVideo">üìπ</div>
            <div class="fullscreen-overlay">
                <div class="fullscreen-title" id="fullscreenTitle">–ö–∞–º–µ—Ä–∞</div>
                <div class="fullscreen-info" id="fullscreenInfo">1920√ó1080 ‚Ä¢ Online ‚Ä¢ HD –∫–∞—á–µ—Å—Ç–≤–æ</div>
                <div class="fullscreen-controls">
                    <button class="btn btn-secondary" onclick="toggleFullscreenAudio()" id="fullscreenAudioBtn">
                        üîá –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫
                    </button>
                    <div class="volume-control">
                        <span>üîä</span>
                        <input type="range" class="volume-slider" min="0" max="1" step="0.1" value="0.7" 
                               onchange="adjustFullscreenVolume(this.value)" id="fullscreenVolume">
                        <span id="fullscreenVolumeValue">70%</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- –í–°–ï –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –ê–î–ú–ò–ù–ö–ò –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô... -->
    <!-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã -->
    <div id="addApartmentModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAddApartmentModal()">&times;</span>
            <div class="modal-header">
                <h2 class="modal-title">‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É</h2>
            </div>

            <form id="addApartmentForm">
                <div class="form-group">
                    <label for="apartmentName">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:</label>
                    <input type="text" id="apartmentName" name="apartmentName" required 
                           placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –ü—É—à–∫–∏–Ω–∞">
                </div>

                <div class="form-group">
                    <label for="apartmentNumber">–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:</label>
                    <input type="text" id="apartmentNumber" name="apartmentNumber" required 
                           placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 12–ê">
                </div>

                <div style="text-align: right; margin-top: 20px;">
                    <button type="button" class="btn btn-secondary" onclick="closeAddApartmentModal()">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button type="submit" class="btn btn-success" style="margin-left: 10px;">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã -->
    <div id="addCameraModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAddCameraModal()">&times;</span>
            <div class="modal-header">
                <h2 class="modal-title">üìπ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É</h2>
            </div>

            <form id="addCameraForm">
                <div class="form-group">
                    <label for="cameraName">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã:</label>
                    <input type="text" id="cameraName" name="cameraName" required 
                           placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∏—Ö–æ–∂–∞—è">
                </div>

                <div class="form-group">
                    <label for="cameraApartment">–ö–≤–∞—Ä—Ç–∏—Ä–∞:</label>
                    <select id="cameraApartment" name="cameraApartment" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É...</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="rtspLink">RTSP —Å—Å—ã–ª–∫–∞:</label>
                    <input type="url" id="rtspLink" name="rtspLink" required 
                           placeholder="rtsp://192.168.1.100:554/stream1">
                    <small style="color: #666; font-size: 12px;">
                        –§–æ—Ä–º–∞—Ç: rtsp://IP:port/path –∏–ª–∏ http://IP:port/mjpeg
                    </small>
                </div>

                <div class="form-group">
                    <button type="button" class="btn btn-secondary" onclick="testRtspConnection()">
                        üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    </button>
                    <span id="testResult" style="margin-left: 10px;"></span>
                </div>

                <div style="text-align: right; margin-top: 20px;">
                    <button type="button" class="btn btn-secondary" onclick="closeAddCameraModal()">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button type="submit" class="btn btn-success" style="margin-left: 10px;">
                        üìπ –î–æ–±–∞–≤–∏—Ç—å
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã -->
    <div id="editCameraModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeEditCameraModal()">&times;</span>
            <div class="modal-header">
                <h2 class="modal-title">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É</h2>
            </div>

            <form id="editCameraForm">
                <input type="hidden" id="editCameraId">
                
                <div class="form-group">
                    <label for="editCameraName">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã:</label>
                    <input type="text" id="editCameraName" name="editCameraName" required>
                </div>

                <div class="form-group">
                    <label for="editCameraApartment">–ö–≤–∞—Ä—Ç–∏—Ä–∞:</label>
                    <select id="editCameraApartment" name="editCameraApartment" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É...</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="editRtspLink">RTSP —Å—Å—ã–ª–∫–∞:</label>
                    <input type="url" id="editRtspLink" name="editRtspLink" required>
                </div>

                <div style="text-align: right; margin-top: 20px;">
                    <button type="button" class="btn btn-secondary" onclick="closeEditCameraModal()">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button type="submit" class="btn btn-success" style="margin-left: 10px;">
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã -->
    <div id="editApartmentModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeEditApartmentModal()">&times;</span>
            <div class="modal-header">
                <h2 class="modal-title">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É</h2>
            </div>

            <form id="editApartmentForm">
                <input type="hidden" id="editApartmentId">
                
                <div class="form-group">
                    <label for="editApartmentName">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã:</label>
                    <input type="text" id="editApartmentName" name="editApartmentName" required>
                </div>

                <div class="form-group">
                    <label for="editApartmentNumber">–ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:</label>
                    <input type="text" id="editApartmentNumber" name="editApartmentNumber" required>
                </div>

                <div style="text-align: right; margin-top: 20px;">
                    <button type="button" class="btn btn-secondary" onclick="closeEditApartmentModal()">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button type="submit" class="btn btn-success" style="margin-left: 10px;">
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // ===== –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ö–û–î –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô =====
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        let currentUser = { role: 'admin', name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' };
        let configData = {
            apartments: [],
            cameras: [],
            settings: {}
        };
        let currentApartmentIndex = 0;
        let autocycleTimer = null;
        let autocycleInterval = 15000; // 15 —Å–µ–∫—É–Ω–¥
        let isAutocycleActive = true;
        let activeAudioCamera = null;
        let currentFullscreenCamera = null;

        // ===== –î–û–ë–ê–í–õ–ï–ù–û: HLS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ =====
        let hlsInstances = new Map();
        let activeStreams = new Map();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        document.addEventListener('DOMContentLoaded', function() {
            setUserRole('admin');
            loadConfigData();
            startAutocycle();
            
            // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && currentFullscreenCamera) {
                    closeFullscreen();
                } else if (e.key === 'ArrowLeft') {
                    previousApartment();
                } else if (e.key === 'ArrowRight') {
                    nextApartment();
                } else if (e.key === ' ') {
                    e.preventDefault();
                    toggleAutocycle();
                }
            });
        });

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        function setUserRole(role) {
            document.body.className = `user-${role}`;
            
            if (role === 'admin') {
                document.getElementById('userAvatar').textContent = 'A';
                document.getElementById('userName').textContent = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
                document.getElementById('userRole').textContent = '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø';
            } else {
                document.getElementById('userAvatar').textContent = 'O';
                document.getElementById('userName').textContent = '–û–ø–µ—Ä–∞—Ç–æ—Ä';
                document.getElementById('userRole').textContent = '–¢–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä';
            }
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
        function showScreen(screenName) {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
            document.querySelectorAll('.screen').forEach(screen => screen.classList.remove('active'));
            document.querySelectorAll('.navigation .btn').forEach(btn => btn.classList.remove('active'));
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
            document.getElementById(screenName + 'Screen').classList.add('active');
            document.getElementById(screenName + 'Btn').classList.add('active');
            
            if (screenName === 'admin') {
                loadApartmentsTable();
                loadCamerasTable();
                loadSettings();
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –ò–ó–ú–ï–ù–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
        async function loadConfigData() {
            try {
                // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
                const apartmentsResponse = await fetch('/api/apartments');
                const camerasResponse = await fetch('/api/cameras');
                
                if (apartmentsResponse.ok && camerasResponse.ok) {
                    configData.apartments = await apartmentsResponse.json();
                    configData.cameras = await camerasResponse.json();
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
                } else {
                    throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
                // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
                configData = {
                    apartments: [
                        { id: 1, apartment_name: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞", apartment_number: "12–ê" }
                    ],
                    cameras: [
                        { 
                            id: 1, 
                            camera_name: "–ö–∞–º–µ—Ä–∞ —Ö–æ–ª–ª–∞", 
                            apartment_id: 1, 
                            apartment_name: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞", 
                            rtsp_link: "rtsp://185.70.184.101:8554/cam91-99", 
                            status: "offline" 
                        }
                    ],
                    settings: {
                        rotation_interval: 15,
                        connection_timeout: 10,
                        max_retry_attempts: 5,
                        grid_size: 16
                    }
                };
            }

            setupApartmentButtons();
            showApartment(0);
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä
        function setupApartmentButtons() {
            const container = document.getElementById('apartmentButtons');
            container.innerHTML = '';
            
            configData.apartments.forEach((apartment, index) => {
                const btn = document.createElement('button');
                btn.className = 'apartment-btn';
                btn.textContent = apartment.apartment_number;
                btn.title = apartment.apartment_name;
                btn.onclick = () => showApartment(index);
                if (index === currentApartmentIndex) {
                    btn.classList.add('active');
                }
                container.appendChild(btn);
            });
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É - –ò–ó–ú–ï–ù–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ RTSP
        async function showApartment(apartmentIndex) {
            currentApartmentIndex = apartmentIndex;
            const apartment = configData.apartments[apartmentIndex];
            if (!apartment) return;

            console.log(`üè† –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É: ${apartment.apartment_name}`);

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø–æ—Ç–æ–∫–∏
            await stopAllStreams();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä
            document.querySelectorAll('.apartment-btn').forEach((btn, index) => {
                btn.classList.toggle('active', index === apartmentIndex);
            });

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
            const cameras = configData.cameras.filter(c => c.apartment_id === apartment.id);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
            document.getElementById('apartmentTitle').textContent = apartment.apartment_name;
            document.getElementById('apartmentDescription').textContent = 
                `–ö–∞–º–µ—Ä: ${cameras.length} | –ö–≤–∞—Ä—Ç–∏—Ä–∞ ${apartmentIndex + 1} –∏–∑ ${configData.apartments.length}`;

            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ç–∫—É –∫–∞–º–µ—Ä
            renderCameraGrid(cameras);

            // –î–û–ë–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ RTSP –ø–æ—Ç–æ–∫–æ–≤
            setTimeout(() => {
                cameras.forEach(camera => {
                    startCameraStream(camera);
                });
            }, 1000);
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏ –∫–∞–º–µ—Ä - –ò–ó–ú–ï–ù–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        function renderCameraGrid(cameras) {
            const grid = document.getElementById('cameraGrid');
            grid.innerHTML = '';

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏
            grid.className = 'camera-grid';
            if (cameras.length > 0) {
                grid.classList.add(`cameras-${cameras.length}`);
            }

            cameras.forEach(camera => {
                const slot = document.createElement('div');
                slot.className = 'camera-slot';
                slot.onclick = () => openFullscreen(camera);

                slot.innerHTML = `
                    <video class="camera-video-element" id="video-${camera.id}" muted playsinline></video>
                    <div class="camera-placeholder" id="placeholder-${camera.id}">
                        <div class="loading-spinner"></div>
                        <div style="font-size: 14px; margin-top: 10px;">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</div>
                    </div>
                    <div class="status-indicator connecting" id="indicator-${camera.id}"></div>
                    <div class="camera-controls">
                        <button class="camera-btn ${activeAudioCamera === camera.id ? 'audio-active' : ''}" 
                                onclick="event.stopPropagation(); toggleCameraAudio(${camera.id})" 
                                title="–ó–≤—É–∫" id="audio-${camera.id}">
                            ${activeAudioCamera === camera.id ? 'üîä' : 'üîá'}
                        </button>
                    </div>
                    <div class="camera-overlay">
                        <div class="camera-name">${camera.camera_name}</div>
                        <div class="camera-status" id="status-${camera.id}">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</div>
                    </div>
                `;

                grid.appendChild(slot);
            });
        }

        // ===== –î–û–ë–ê–í–õ–ï–ù–û: RTSP —Ñ—É–Ω–∫—Ü–∏–∏ =====
        async function startCameraStream(camera) {
            const streamId = `${camera.id}_low`;
            
            try {
                console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${camera.camera_name}`);
                
                const response = await fetch('/api/stream/start', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        streamId: streamId,
                        rtspUrl: camera.rtsp_link,
                        quality: 'low'
                    })
                });
                
                if (response.ok) {
                    console.log(`‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω: ${streamId}`);
                    activeStreams.set(streamId, camera);
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º HLS —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                        loadHLSVideo(camera.id, streamId);
                    }, 3000);
                    
                } else {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞: ${response.statusText}`);
                    updateCameraStatus(camera.id, 'offline', '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞');
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–ª—è ${camera.camera_name}:`, error);
                updateCameraStatus(camera.id, 'offline', '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
            }
        }

        async function loadHLSVideo(cameraId, streamId) {
            const video = document.getElementById(`video-${cameraId}`);
            const placeholder = document.getElementById(`placeholder-${cameraId}`);
            
            if (!video || !placeholder) {
                console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–º–µ—Ä—ã ${cameraId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                return;
            }
            
            const streamUrl = `/stream/${streamId}/playlist.m3u8`;
            console.log(`üì∫ –ó–∞–≥—Ä—É–∑–∫–∞ HLS –¥–ª—è –∫–∞–º–µ—Ä—ã ${cameraId}: ${streamUrl}`);
            
            if (Hls.isSupported()) {
                if (hlsInstances.has(cameraId)) {
                    hlsInstances.get(cameraId).destroy();
                }
                
                const hls = new Hls({
                    debug: false,
                    enableWorker: true,
                    lowLatencyMode: true,
                    backBufferLength: 10
                });
                
                hlsInstances.set(cameraId, hls);
                
                hls.loadSource(streamUrl);
                hls.attachMedia(video);
                
                hls.on(Hls.Events.MANIFEST_PARSED, () => {
                    console.log(`‚úÖ HLS –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –∫–∞–º–µ—Ä—ã ${cameraId}`);
                    placeholder.style.display = 'none';
                    video.style.display = 'block';
                    
                    video.play().catch(error => {
                        console.warn(`‚ö†Ô∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–º–µ—Ä—ã ${cameraId}`);
                    });
                    
                    updateCameraStatus(cameraId, 'online', '480p ‚Ä¢ –û–Ω–ª–∞–π–Ω');
                });
                
                hls.on(Hls.Events.ERROR, (event, data) => {
                    console.error(`‚ùå HLS –æ—à–∏–±–∫–∞ –¥–ª—è –∫–∞–º–µ—Ä—ã ${cameraId}:`, data);
                    if (data.fatal) {
                        updateCameraStatus(cameraId, 'offline', '–û—à–∏–±–∫–∞ HLS');
                        placeholder.innerHTML = `
                            <div style="font-size: 24px;">‚ùå</div>
                            <div style="font-size: 12px; margin-top: 10px;">–û—à–∏–±–∫–∞ HLS</div>
                        `;
                        placeholder.style.display = 'flex';
                        video.style.display = 'none';
                    }
                });
                
            } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                video.src = streamUrl;
                video.addEventListener('loadedmetadata', () => {
                    placeholder.style.display = 'none';
                    video.style.display = 'block';
                    video.play().catch(console.warn);
                    updateCameraStatus(cameraId, 'online', '480p ‚Ä¢ –û–Ω–ª–∞–π–Ω');
                });
            } else {
                console.error(`‚ùå HLS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–º–µ—Ä—ã ${cameraId}`);
                updateCameraStatus(cameraId, 'offline', 'HLS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            }
        }

        async function stopAllStreams() {
            console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤...');
            
            for (const [cameraId, hls] of hlsInstances) {
                try {
                    hls.destroy();
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è HLS –¥–ª—è –∫–∞–º–µ—Ä—ã ${cameraId}:`, error);
                }
            }
            hlsInstances.clear();
            
            for (const streamId of activeStreams.keys()) {
                try {
                    await fetch('/api/stream/stop', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ streamId })
                    });
                } catch (error) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ ${streamId}:`, error);
                }
            }
            activeStreams.clear();
            activeAudioCamera = null;
        }

        function updateCameraStatus(cameraId, status, message) {
            const indicator = document.getElementById(`indicator-${cameraId}`);
            const statusText = document.getElementById(`status-${cameraId}`);
            
            if (indicator) {
                indicator.className = `status-indicator ${status}`;
            }
            
            if (statusText) {
                statusText.textContent = message;
            }
        }

        // ===== –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô =====
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º
        function previousApartment() {
            const newIndex = currentApartmentIndex === 0 ? 
                configData.apartments.length - 1 : currentApartmentIndex - 1;
            showApartment(newIndex);
        }

        function nextApartment() {
            const newIndex = (currentApartmentIndex + 1) % configData.apartments.length;
            showApartment(newIndex);
        }

        // –ê–≤—Ç–æ—Ü–∏–∫–ª
        function startAutocycle() {
            if (autocycleTimer) {
                clearInterval(autocycleTimer);
            }
            
            autocycleTimer = setInterval(() => {
                if (isAutocycleActive && configData.apartments.length > 1) {
                    nextApartment();
                }
            }, autocycleInterval);
        }

        function toggleAutocycle() {
            isAutocycleActive = !isAutocycleActive;
            const btn = document.getElementById('autocycleBtn');
            const status = document.getElementById('cycleStatus');
            
            if (isAutocycleActive) {
                btn.textContent = '‚è∏Ô∏è –ü–∞—É–∑–∞';
                status.textContent = '–ê–∫—Ç–∏–≤–Ω–æ';
            } else {
                btn.textContent = '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç';
                status.textContent = '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
            }
        }

        function updateCycleInterval() {
            const select = document.getElementById('cycleInterval');
            autocycleInterval = parseInt(select.value) * 1000;
            startAutocycle();
        }

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –∫–∞–º–µ—Ä - –ò–ó–ú–ï–ù–ï–ù–û: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        function toggleCameraAudio(cameraId) {
            if (activeAudioCamera === cameraId) {
                activeAudioCamera = null;
            } else {
                activeAudioCamera = cameraId;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∞—É–¥–∏–æ
            document.querySelectorAll('.camera-btn').forEach((btn, index) => {
                const camera = configData.cameras.filter(c => c.apartment_id === configData.apartments[currentApartmentIndex].id)[index];
                if (camera) {
                    btn.classList.toggle('audio-active', activeAudioCamera === camera.id);
                    btn.textContent = activeAudioCamera === camera.id ? 'üîä' : 'üîá';
                }
            });

            // –î–û–ë–ê–í–õ–ï–ù–û: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const video = document.getElementById(`video-${cameraId}`);
            if (video) {
                video.muted = activeAudioCamera !== cameraId;
            }

            const camera = configData.cameras.find(c => c.id === cameraId);
            if (camera) {
                const status = activeAudioCamera === cameraId ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω';
                showNotification(`–ó–≤—É–∫ ${camera.camera_name}: ${status}`, 'success');
            }
        }

        // –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô...
        // (openFullscreen, closeFullscreen, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç.–¥.)

        // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        function openFullscreen(camera) {
            currentFullscreenCamera = camera;
            
            document.getElementById('fullscreenTitle').textContent = camera.camera_name;
            document.getElementById('fullscreenInfo').textContent = 
                `1920√ó1080 ‚Ä¢ ${camera.status === 'online' ? 'Online' : 'Offline'} ‚Ä¢ HD –∫–∞—á–µ—Å—Ç–≤–æ`;
            
            const audioBtn = document.getElementById('fullscreenAudioBtn');
            const hasAudio = activeAudioCamera === camera.id;
            audioBtn.textContent = hasAudio ? 'üîä –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîá –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
            
            document.getElementById('fullscreenModal').classList.add('active');
        }

        function closeFullscreen() {
            document.getElementById('fullscreenModal').classList.remove('active');
            currentFullscreenCamera = null;
        }

        function toggleFullscreenAudio() {
            if (currentFullscreenCamera) {
                toggleCameraAudio(currentFullscreenCamera.id);
                
                const audioBtn = document.getElementById('fullscreenAudioBtn');
                const hasAudio = activeAudioCamera === currentFullscreenCamera.id;
                audioBtn.textContent = hasAudio ? 'üîä –í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîá –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
            }
        }

        function adjustFullscreenVolume(value) {
            const volumeValue = Math.round(value * 100);
            document.getElementById('fullscreenVolumeValue').textContent = volumeValue + '%';
        }

        // –í–°–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
        function switchTab(tabName) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));

            event.target.classList.add('active');
            document.getElementById(tabName + '-tab').classList.add('active');
        }

        function loadApartmentsTable() {
            const tbody = document.querySelector('#apartmentsTable tbody');
            tbody.innerHTML = '';

            configData.apartments.forEach((apartment, index) => {
                const camerasCount = configData.cameras.filter(c => c.apartment_id === apartment.id).length;
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${apartment.apartment_name}</td>
                    <td>${apartment.apartment_number}</td>
                    <td>${camerasCount}</td>
                    <td>
                        <button class="btn btn-secondary btn-small" onclick="editApartment(${apartment.id})">
                            ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                        </button>
                        <button class="btn btn-danger btn-small" onclick="deleteApartment(${apartment.id})">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function loadCamerasTable() {
            const tbody = document.querySelector('#camerasTable tbody');
            tbody.innerHTML = '';

            configData.cameras.forEach((camera, index) => {
                const statusClass = camera.status === 'online' ? 'online' : 'offline';
                const statusText = camera.status === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω';
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${camera.camera_name}</td>
                    <td>${camera.apartment_name}</td>
                    <td style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                        ${camera.rtsp_link}
                    </td>
                    <td>
                        <span class="camera-status-badge ${statusClass}">${statusText}</span>
                    </td>
                    <td>
                        <button class="btn btn-secondary btn-small" onclick="testCamera(${camera.id})">
                            üîç –¢–µ—Å—Ç
                        </button>
                        <button class="btn btn-secondary btn-small" onclick="editCamera(${camera.id})">
                            ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                        </button>
                        <button class="btn btn-danger btn-small" onclick="deleteCamera(${camera.id})">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function loadSettings() {
            document.getElementById('rotationInterval').value = configData.settings.rotation_interval;
            document.getElementById('connectionTimeout').value = configData.settings.connection_timeout;
            document.getElementById('maxRetryAttempts').value = configData.settings.max_retry_attempts;
            document.getElementById('gridSize').value = configData.settings.grid_size;
        }

        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        function openAddApartmentModal() {
            document.getElementById('addApartmentModal').style.display = 'block';
        }

        function closeAddApartmentModal() {
            document.getElementById('addApartmentModal').style.display = 'none';
            document.getElementById('addApartmentForm').reset();
        }

        function openAddCameraModal() {
            const select = document.getElementById('cameraApartment');
            select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É...</option>';
            
            configData.apartments.forEach(apartment => {
                const option = document.createElement('option');
                option.value = apartment.apartment_name;
                option.textContent = `${apartment.apartment_number} - ${apartment.apartment_name}`;
                select.appendChild(option);
            });
            
            document.getElementById('addCameraModal').style.display = 'block';
        }

        function closeAddCameraModal() {
            document.getElementById('addCameraModal').style.display = 'none';
            document.getElementById('addCameraForm').reset();
            document.getElementById('testResult').innerHTML = '';
        }

        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        function editApartment(apartmentId) {
            const apartment = configData.apartments.find(a => a.id === apartmentId);
            if (!apartment) return;

            document.getElementById('editApartmentId').value = apartment.id;
            document.getElementById('editApartmentName').value = apartment.apartment_name;
            document.getElementById('editApartmentNumber').value = apartment.apartment_number;
            
            document.getElementById('editApartmentModal').style.display = 'block';
        }

        function closeEditApartmentModal() {
            document.getElementById('editApartmentModal').style.display = 'none';
            document.getElementById('editApartmentForm').reset();
        }

        function editCamera(cameraId) {
            const camera = configData.cameras.find(c => c.id === cameraId);
            if (!camera) return;

            document.getElementById('editCameraId').value = camera.id;
            document.getElementById('editCameraName').value = camera.camera_name;
            document.getElementById('editRtspLink').value = camera.rtsp_link;

            const select = document.getElementById('editCameraApartment');
            select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É...</option>';
            
            configData.apartments.forEach(apartment => {
                const option = document.createElement('option');
                option.value = apartment.apartment_name;
                option.textContent = `${apartment.apartment_number} - ${apartment.apartment_name}`;
                if (apartment.apartment_name === camera.apartment_name) {
                    option.selected = true;
                }
                select.appendChild(option);
            });
            
            document.getElementById('editCameraModal').style.display = 'block';
        }

        function closeEditCameraModal() {
            document.getElementById('editCameraModal').style.display = 'none';
            document.getElementById('editCameraForm').reset();
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
        document.getElementById('addApartmentForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const name = document.getElementById('apartmentName').value;
            const number = document.getElementById('apartmentNumber').value;
            
            const newId = Math.max(...configData.apartments.map(a => a.id), 0) + 1;
            
            configData.apartments.push({
                id: newId,
                apartment_name: name,
                apartment_number: number
            });
            
            showNotification('–ö–≤–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
            closeAddApartmentModal();
            loadApartmentsTable();
            setupApartmentButtons();
        });

        document.getElementById('addCameraForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const name = document.getElementById('cameraName').value;
            const apartmentName = document.getElementById('cameraApartment').value;
            const rtspLink = document.getElementById('rtspLink').value;
            
            const apartment = configData.apartments.find(a => a.apartment_name === apartmentName);
            if (!apartment) {
                showNotification('–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', 'error');
                return;
            }
            
            const newId = Math.max(...configData.cameras.map(c => c.id), 0) + 1;
            
            configData.cameras.push({
                id: newId,
                camera_name: name,
                apartment_id: apartment.id,
                apartment_name: apartmentName,
                rtsp_link: rtspLink,
                status: 'offline'
            });
            
            showNotification('–ö–∞–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', 'success');
            closeAddCameraModal();
            loadCamerasTable();
        });

        document.getElementById('editApartmentForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const id = parseInt(document.getElementById('editApartmentId').value);
            const name = document.getElementById('editApartmentName').value;
            const number = document.getElementById('editApartmentNumber').value;
            
            const apartment = configData.apartments.find(a => a.id === id);
            if (apartment) {
                const oldName = apartment.apartment_name;
                apartment.apartment_name = name;
                apartment.apartment_number = number;
                
                configData.cameras.forEach(camera => {
                    if (camera.apartment_name === oldName) {
                        camera.apartment_name = name;
                    }
                });
                
                showNotification('–ö–≤–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
                closeEditApartmentModal();
                loadApartmentsTable();
                loadCamerasTable();
                setupApartmentButtons();
            }
        });

        document.getElementById('editCameraForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const id = parseInt(document.getElementById('editCameraId').value);
            const name = document.getElementById('editCameraName').value;
            const apartmentName = document.getElementById('editCameraApartment').value;
            const rtspLink = document.getElementById('editRtspLink').value;
            
            const camera = configData.cameras.find(c => c.id === id);
            const apartment = configData.apartments.find(a => a.apartment_name === apartmentName);
            
            if (camera && apartment) {
                camera.camera_name = name;
                camera.apartment_id = apartment.id;
                camera.apartment_name = apartmentName;
                camera.rtsp_link = rtspLink;
                
                showNotification('–ö–∞–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
                closeEditCameraModal();
                loadCamerasTable();
                
                const currentApartment = configData.apartments[currentApartmentIndex];
                if (currentApartment && currentApartment.id === apartment.id) {
                    showApartment(currentApartmentIndex);
                }
            }
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ
        function deleteApartment(apartmentId) {
            const apartment = configData.apartments.find(a => a.id === apartmentId);
            const camerasCount = configData.cameras.filter(c => c.apartment_id === apartmentId).length;
            
            if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç ${camerasCount} –∫–∞–º–µ—Ä(—ã) –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ "${apartment.apartment_name}".`)) return;
            
            configData.apartments = configData.apartments.filter(a => a.id !== apartmentId);
            configData.cameras = configData.cameras.filter(c => c.apartment_id !== apartmentId);
            
            showNotification('–ö–≤–∞—Ä—Ç–∏—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
            loadApartmentsTable();
            loadCamerasTable();
            setupApartmentButtons();
            
            if (currentApartmentIndex >= configData.apartments.length) {
                currentApartmentIndex = Math.max(0, configData.apartments.length - 1);
            }
            if (configData.apartments.length > 0) {
                showApartment(currentApartmentIndex);
            }
        }

        function deleteCamera(cameraId) {
            const camera = configData.cameras.find(c => c.id === cameraId);
            if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–º–µ—Ä—É "${camera.camera_name}"?`)) return;
            
            configData.cameras = configData.cameras.filter(c => c.id !== cameraId);
            
            if (activeAudioCamera === cameraId) {
                activeAudioCamera = null;
            }
            
            showNotification('–ö–∞–º–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
            loadCamerasTable();
            
            if (configData.apartments.length > 0) {
                showApartment(currentApartmentIndex);
            }
        }

        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        function testRtspConnection() {
            const rtspLink = document.getElementById('rtspLink').value;
            const testResult = document.getElementById('testResult');
            
            if (!rtspLink) {
                testResult.innerHTML = '<span style="color: #dc3545;">–í–≤–µ–¥–∏—Ç–µ RTSP —Å—Å—ã–ª–∫—É</span>';
                return;
            }
            
            testResult.innerHTML = '<span style="color: #ffc107;">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...</span>';
            
            setTimeout(() => {
                const isValid = rtspLink.startsWith('rtsp://') || rtspLink.startsWith('http://');
                if (isValid) {
                    testResult.innerHTML = '<span style="color: #28a745;">‚úÖ –°—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞</span>';
                } else {
                    testResult.innerHTML = '<span style="color: #dc3545;">‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏</span>';
                }
            }, 1500);
        }

        function testCamera(cameraId) {
            const camera = configData.cameras.find(c => c.id === cameraId);
            if (!camera) return;
            
            showNotification('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã: ' + camera.camera_name, 'warning');
            
            setTimeout(() => {
                camera.status = Math.random() > 0.3 ? 'online' : 'offline';
                loadCamerasTable();
                
                const statusText = camera.status === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
                showNotification(`–ö–∞–º–µ—Ä–∞ ${camera.camera_name}: ${statusText}`, 
                    camera.status === 'online' ? 'success' : 'error');
                
                const currentApartment = configData.apartments[currentApartmentIndex];
                if (currentApartment && camera.apartment_id === currentApartment.id) {
                    showApartment(currentApartmentIndex);
                }
            }, 2000);
        }

        function saveSettings() {
            configData.settings = {
                rotation_interval: parseInt(document.getElementById('rotationInterval').value),
                connection_timeout: parseInt(document.getElementById('connectionTimeout').value),
                max_retry_attempts: parseInt(document.getElementById('maxRetryAttempts').value),
                grid_size: parseInt(document.getElementById('gridSize').value)
            };
            
            showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => notification.classList.add('show'), 100);
            
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }

        function logout() {
            if (confirm('–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?')) {
                location.reload();
            }
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
        window.onclick = function(event) {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }

        console.log('üé• HLS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É!');
    </script>
</body>
</html>
