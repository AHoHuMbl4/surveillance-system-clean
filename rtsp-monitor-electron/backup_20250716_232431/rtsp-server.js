/**
 * RTSP Server —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ—Ç–æ–∫–æ–≤
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è RTSPDecoder –≤ HTTP —Å–µ—Ä–≤–µ—Ä
 */

const http = require('http');
const path = require('path');
const fs = require('fs');
const RTSPDecoder = require('./rtsp-decoder');

class RTSPServer {
    constructor() {
        this.port = 3000;
        this.rtspDecoder = new RTSPDecoder();
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.users = [
            { login: 'admin', password: 'admin123', role: 'admin' },
            { login: 'operator', password: 'operator123', role: 'operator' }
        ];
        
        this.cameras = [
            {
                id: 1,
                camera_name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–º–µ—Ä–∞ 1',
                apartment_name: '–¢–∞–π–ª–∞–Ω–¥',
                rtsp_link: 'rtsp://185.70.184.101:8554/cam91-99'
            },
            {
                id: 2,
                camera_name: 'Demo BigBuckBunny',
                apartment_name: '–¢–∞–π–ª–∞–Ω–¥',
                rtsp_link: 'rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mp4'
            }
        ];
        
        this.apartments = [
            { id: 1, apartment_name: '–¢–∞–π–ª–∞–Ω–¥', apartment_number: '91' }
        ];
        
        console.log('üé• RTSP Server —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
     */
    createServer() {
        const server = http.createServer((req, res) => {
            this.handleRequest(req, res);
        });
        
        return server;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    handleRequest(req, res) {
        const url = new URL(req.url, `http://${req.headers.host}`);
        const pathname = url.pathname;
        
        // CORS
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
        
        if (req.method === 'OPTIONS') {
            res.writeHead(200);
            res.end();
            return;
        }

        console.log(`üìä ${req.method} ${pathname}`);

        // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
        if (pathname.startsWith('/api/')) {
            this.handleAPI(req, res, pathname);
        } else if (pathname.startsWith('/stream/')) {
            this.handleStreamRequest(req, res, pathname);
        } else if (pathname === '/' || pathname === '/index.html') {
            this.serveIndexHTML(res);
        } else {
            res.writeHead(404);
            res.end('Not Found');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø–æ—Ç–æ–∫–∞–º
     */
    async handleStreamRequest(req, res, pathname) {
        // –§–æ—Ä–º–∞—Ç: /stream/{streamId}/playlist.m3u8 –∏–ª–∏ /stream/{streamId}/{segment}.ts
        const pathParts = pathname.split('/');
        
        if (pathParts.length < 3) {
            res.writeHead(404);
            res.end('Invalid stream path');
            return;
        }
        
        const streamId = pathParts[2];
        const filename = pathParts[3] || 'playlist.m3u8';
        
        const streamData = this.rtspDecoder.activeStreams.get(streamId);
        if (!streamData) {
            res.writeHead(404);
            res.end('Stream not found');
            return;
        }
        
        const filePath = path.join(streamData.streamDir, filename);
        
        if (!fs.existsSync(filePath)) {
            res.writeHead(404);
            res.end('File not found');
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
        let contentType = 'application/octet-stream';
        if (filename.endsWith('.m3u8')) {
            contentType = 'application/x-mpegURL';
        } else if (filename.endsWith('.ts')) {
            contentType = 'video/MP2T';
        }
        
        res.setHeader('Content-Type', contentType);
        res.setHeader('Cache-Control', 'no-cache');
        
        // –û—Ç–¥–∞–µ–º —Ñ–∞–π–ª
        const fileStream = fs.createReadStream(filePath);
        fileStream.pipe(res);
        
        fileStream.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ—Ç–æ–∫–∞:', error);
            res.writeHead(500);
            res.end('Stream read error');
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ API
     */
    async handleAPI(req, res, pathname) {
        res.setHeader('Content-Type', 'application/json');
        
        try {
            switch (pathname) {
                case '/api/cameras':
                    res.writeHead(200);
                    res.end(JSON.stringify(this.cameras));
                    break;
                    
                case '/api/apartments':
                    res.writeHead(200);
                    res.end(JSON.stringify(this.apartments));
                    break;
                    
                case '/api/stream/start':
                    if (req.method === 'POST') {
                        await this.handleStreamStart(req, res);
                    } else {
                        res.writeHead(405);
                        res.end(JSON.stringify({ error: 'Method not allowed' }));
                    }
                    break;
                    
                case '/api/stream/stop':
                    if (req.method === 'POST') {
                        await this.handleStreamStop(req, res);
                    } else {
                        res.writeHead(405);
                        res.end(JSON.stringify({ error: 'Method not allowed' }));
                    }
                    break;
                    
                case '/api/streams/status':
                    res.writeHead(200);
                    res.end(JSON.stringify(this.rtspDecoder.getStreamsStatus()));
                    break;
                    
                case '/api/system-status':
                    res.writeHead(200);
                    res.end(JSON.stringify({
                        status: 'running',
                        version: '1.0.0',
                        rtsp_decoder: 'active',
                        active_streams: this.rtspDecoder.activeStreams.size,
                        cameras_count: this.cameras.length,
                        uptime: process.uptime()
                    }));
                    break;
                    
                default:
                    res.writeHead(404);
                    res.end(JSON.stringify({ error: 'API endpoint not found' }));
            }
        } catch (error) {
            console.error('‚ùå API Error:', error);
            res.writeHead(500);
            res.end(JSON.stringify({ error: 'Internal server error' }));
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
     */
    async handleStreamStart(req, res) {
        let body = '';
        req.on('data', chunk => body += chunk.toString());
        
        req.on('end', async () => {
            try {
                const { cameraId, quality = 'low' } = JSON.parse(body);
                const camera = this.cameras.find(c => c.id == cameraId);
                
                if (!camera) {
                    res.writeHead(404);
                    res.end(JSON.stringify({ error: 'Camera not found' }));
                    return;
                }
                
                console.log(`üöÄ –ó–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞: –∫–∞–º–µ—Ä–∞ ${camera.camera_name}, –∫–∞—á–µ—Å—Ç–≤–æ ${quality}`);
                
                const streamData = await this.rtspDecoder.startStream(camera, quality);
                
                res.writeHead(200);
                res.end(JSON.stringify({
                    success: true,
                    streamId: streamData.id,
                    streamUrl: this.rtspDecoder.getStreamURL(streamData.id),
                    camera: camera.camera_name
                }));
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞:', error);
                res.writeHead(500);
                res.end(JSON.stringify({ error: error.message }));
            }
        });
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞
     */
    async handleStreamStop(req, res) {
        let body = '';
        req.on('data', chunk => body += chunk.toString());
        
        req.on('end', async () => {
            try {
                const { streamId } = JSON.parse(body);
                
                await this.rtspDecoder.stopStream(streamId);
                
                res.writeHead(200);
                res.end(JSON.stringify({ success: true }));
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞:', error);
                res.writeHead(500);
                res.end(JSON.stringify({ error: error.message }));
            }
        });
    }

    /**
     * –û—Ç–¥–∞—á–∞ HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    serveIndexHTML(res) {
        const indexPath = path.join(__dirname, 'index.html');
        
        if (fs.existsSync(indexPath)) {
            const content = fs.readFileSync(indexPath, 'utf8');
            res.setHeader('Content-Type', 'text/html; charset=utf-8');
            res.writeHead(200);
            res.end(content);
        } else {
            // Fallback HTML
            const html = this.generateFallbackHTML();
            res.setHeader('Content-Type', 'text/html; charset=utf-8');
            res.writeHead(200);
            res.end(html);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback HTML —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä–æ–º
     */
    generateFallbackHTML() {
        return `
<!DOCTYPE html>
<html>
<head>
    <title>RTSP Monitor - –†–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏</title>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #2c3e50; color: white; }
        .container { max-width: 1200px; margin: 0 auto; }
        .camera-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; margin: 20px 0; }
        .camera-card { background: #34495e; border-radius: 10px; padding: 20px; }
        .video-container { position: relative; background: #000; border-radius: 5px; }
        video { width: 100%; height: 300px; object-fit: cover; }
        .camera-title { margin: 0 0 10px 0; color: #ecf0f1; }
        .controls { margin: 10px 0; }
        button { background: #3498db; color: white; border: none; padding: 10px 15px; border-radius: 5px; cursor: pointer; margin: 5px; }
        button:hover { background: #2980b9; }
        button:disabled { background: #7f8c8d; cursor: not-allowed; }
        .status { padding: 5px 10px; border-radius: 3px; font-size: 12px; }
        .status.online { background: #27ae60; }
        .status.offline { background: #e74c3c; }
        .status.connecting { background: #f39c12; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üé• RTSP Monitor - –†–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏</h1>
        
        <div id="system-status">
            <p>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...</p>
        </div>
        
        <div class="camera-grid" id="cameraGrid">
            <!-- –ö–∞–º–µ—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ JavaScript -->
        </div>
    </div>

    <script>
        console.log('üöÄ RTSP Monitor —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω');
        
        let cameras = [];
        let activeStreams = new Map();

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–º–µ—Ä
        async function loadCameras() {
            try {
                const response = await fetch('/api/cameras');
                cameras = await response.json();
                console.log('üìπ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞–º–µ—Ä—ã:', cameras);
                renderCameras();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–º–µ—Ä:', error);
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        async function loadSystemStatus() {
            try {
                const response = await fetch('/api/system-status');
                const status = await response.json();
                document.getElementById('system-status').innerHTML = \`
                    <p><strong>üìä –°—Ç–∞—Ç—É—Å:</strong> \${status.status} | 
                    <strong>üé¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤:</strong> \${status.active_streams} | 
                    <strong>üìπ –ö–∞–º–µ—Ä:</strong> \${status.cameras_count}</p>
                \`;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
            }
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–º–µ—Ä
        function renderCameras() {
            const grid = document.getElementById('cameraGrid');
            grid.innerHTML = '';

            cameras.forEach(camera => {
                const cameraCard = document.createElement('div');
                cameraCard.className = 'camera-card';
                cameraCard.innerHTML = \`
                    <h3 class="camera-title">\${camera.camera_name}</h3>
                    <div class="video-container">
                        <video id="video-\${camera.id}" controls muted></video>
                    </div>
                    <div class="controls">
                        <button onclick="startStream(\${camera.id}, 'low')">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å (480p)</button>
                        <button onclick="startStream(\${camera.id}, 'high')">‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å (1080p)</button>
                        <button onclick="stopStream(\${camera.id})">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                        <span class="status offline" id="status-\${camera.id}">–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</span>
                    </div>
                    <div>
                        <small>RTSP: \${camera.rtsp_link}</small>
                    </div>
                \`;
                grid.appendChild(cameraCard);
            });
        }

        // –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
        async function startStream(cameraId, quality) {
            console.log(\`üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –∫–∞–º–µ—Ä—ã \${cameraId} (\${quality})\`);
            
            const statusEl = document.getElementById(\`status-\${cameraId}\`);
            statusEl.className = 'status connecting';
            statusEl.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';

            try {
                const response = await fetch('/api/stream/start', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ cameraId, quality })
                });

                const result = await response.json();
                
                if (result.success) {
                    console.log(\`‚úÖ –ü–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω: \${result.streamId}\`);
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º HLS –ø–ª–µ–µ—Ä
                    setupHLSPlayer(cameraId, result.streamUrl);
                    
                    activeStreams.set(cameraId, result.streamId);
                    statusEl.className = 'status online';
                    statusEl.textContent = \`–û–Ω–ª–∞–π–Ω (\${quality})\`;
                } else {
                    throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (error) {
                console.error(\`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ \${cameraId}:\`, error);
                statusEl.className = 'status offline';
                statusEl.textContent = '–û—à–∏–±–∫–∞';
            }
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HLS –ø–ª–µ–µ—Ä–∞
        function setupHLSPlayer(cameraId, streamUrl) {
            const video = document.getElementById(\`video-\${cameraId}\`);
            
            if (Hls.isSupported()) {
                const hls = new Hls({
                    liveSyncDurationCount: 1,
                    liveMaxLatencyDurationCount: 2,
                    enableWorker: true,
                    lowLatencyMode: true
                });
                
                hls.loadSource(streamUrl);
                hls.attachMedia(video);
                
                hls.on(Hls.Events.MANIFEST_PARSED, () => {
                    console.log(\`‚úÖ HLS –º–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –∫–∞–º–µ—Ä—ã \${cameraId}\`);
                    video.play().catch(console.warn);
                });
                
                hls.on(Hls.Events.ERROR, (event, data) => {
                    console.error(\`‚ùå HLS –æ—à–∏–±–∫–∞ –¥–ª—è –∫–∞–º–µ—Ä—ã \${cameraId}:\`, data);
                });
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ HLS –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                video.hlsInstance = hls;
                
            } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                // –ù–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ HLS (Safari)
                video.src = streamUrl;
                video.addEventListener('loadedmetadata', () => {
                    video.play().catch(console.warn);
                });
            }
        }

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞
        async function stopStream(cameraId) {
            console.log(\`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ –∫–∞–º–µ—Ä—ã \${cameraId}\`);
            
            const streamId = activeStreams.get(cameraId);
            if (!streamId) {
                console.warn(\`‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –∫–∞–º–µ—Ä—ã \${cameraId} –Ω–µ –Ω–∞–π–¥–µ–Ω\`);
                return;
            }

            try {
                const response = await fetch('/api/stream/stop', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ streamId })
                });

                const result = await response.json();
                
                if (result.success) {
                    console.log(\`‚úÖ –ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: \${streamId}\`);
                    
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                    const video = document.getElementById(\`video-\${cameraId}\`);
                    if (video.hlsInstance) {
                        video.hlsInstance.destroy();
                    }
                    video.src = '';
                    
                    activeStreams.delete(cameraId);
                    
                    const statusEl = document.getElementById(\`status-\${cameraId}\`);
                    statusEl.className = 'status offline';
                    statusEl.textContent = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
                }
            } catch (error) {
                console.error(\`‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ \${cameraId}:\`, error);
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        loadSystemStatus();
        loadCameras();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            loadSystemStatus();
        }, 10000);
    </script>
</body>
</html>`;
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
     */
    start(port = 3000) {
        this.port = port;
        const server = this.createServer();
        
        server.listen(port, 'localhost', () => {
            console.log(`üåê RTSP Server —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
            console.log(`üé¨ FFmpeg –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞`);
            console.log(`üîê –¢–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏–Ω—ã: admin/admin123, operator/operator123`);
            console.log(`‚úÖ –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–ª—å–Ω—ã—Ö RTSP –ø–æ—Ç–æ–∫–æ–≤`);
        });

        server.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', async () => {
            console.log('\nüõë –ü–æ–ª—É—á–µ–Ω SIGINT, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤...');
            await this.rtspDecoder.stopAllStreams();
            process.exit(0);
        });

        return server;
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (require.main === module) {
    const server = new RTSPServer();
    server.start(3000);
}

module.exports = RTSPServer;
