const fs = require('fs');
const path = require('path');

class HLSHandler {
    constructor(tempStreamsPath) {
        this.tempStreamsPath = tempStreamsPath || path.join(__dirname, 'temp_streams');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ HLS –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    handleRequest(req, res, pathname) {
        // –ü–∞—Ä—Å–∏–Ω–≥ –ø—É—Ç–∏: /stream/{streamId}/{filename}
        const parts = pathname.split('/').filter(p => p);
        
        if (parts.length < 3) {
            return false;
        }
        
        const streamId = parts[1];
        const fileName = parts.slice(2).join('/');
        
        console.log(`üé• HLS –∑–∞–ø—Ä–æ—Å: streamId=${streamId}, file=${fileName}`);
        
        // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        const filePath = path.join(this.tempStreamsPath, streamId, fileName);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        if (!fs.existsSync(filePath)) {
            console.log(`‚ùå HLS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
            res.writeHead(404, { 'Content-Type': 'text/plain' });
            res.end('HLS file not found');
            return true;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞
        const ext = path.extname(fileName).toLowerCase();
        let contentType = 'application/octet-stream';
        
        if (ext === '.m3u8') {
            contentType = 'application/vnd.apple.mpegurl';
        } else if (ext === '.ts') {
            contentType = 'video/mp2t';
        }
        
        // –ß—Ç–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        try {
            const stat = fs.statSync(filePath);
            
            res.writeHead(200, {
                'Content-Type': contentType,
                'Content-Length': stat.size,
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache',
                'Expires': '0',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, OPTIONS',
                'Access-Control-Allow-Headers': 'Range'
            });
            
            const stream = fs.createReadStream(filePath);
            stream.pipe(res);
            
            stream.on('error', (error) => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è HLS —Ñ–∞–π–ª–∞: ${error}`);
                res.end();
            });
            
            return true;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HLS: ${error}`);
            res.writeHead(500);
            res.end('Internal Server Error');
            return true;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–∞
     */
    isStreamAvailable(streamId) {
        const streamPath = path.join(this.tempStreamsPath, streamId);
        const playlistPath = path.join(streamPath, 'playlist.m3u8');
        return fs.existsSync(playlistPath);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ç–æ–∫–µ
     */
    getStreamInfo(streamId) {
        const streamPath = path.join(this.tempStreamsPath, streamId);
        
        if (!fs.existsSync(streamPath)) {
            return null;
        }
        
        try {
            const files = fs.readdirSync(streamPath);
            const segments = files.filter(f => f.endsWith('.ts')).length;
            const hasPlaylist = files.includes('playlist.m3u8');
            
            return {
                id: streamId,
                path: streamPath,
                hasPlaylist,
                segments,
                files: files.length
            };
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ç–æ–∫–µ: ${error}`);
            return null;
        }
    }
}

module.exports = HLSHandler;
