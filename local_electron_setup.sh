#!/bin/bash

# –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Electron –∏ —Å–±–æ—Ä–∫–∞ –ë–ï–ó sudo –ø—Ä–∞–≤
# –í—Å–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞

set -e

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warn() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

echo "üöÄ –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ RTSP Monitor Electron"
echo "============================================="

# 1. –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
setup_local_project() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    mkdir -p rtsp-monitor-electron
    cd rtsp-monitor-electron
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è npm –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –Ω–µ—Ç package.json)
    if [ ! -f "package.json" ]; then
        log_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è npm –ø—Ä–æ–µ–∫—Ç–∞..."
        npm init -y
    fi
    
    # –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Electron –∏ electron-builder (–ë–ï–ó -g)
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Electron –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ sudo)..."
    npm install electron@latest --save-dev
    npm install electron-builder@latest --save-dev
    npm install rimraf --save-dev
    
    log_info "Electron —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –≤ node_modules"
}

# 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
create_project_files() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
    if [ -f "../autonomous-server.js" ]; then
        cp ../autonomous-server.js ./
        log_info "autonomous-server.js —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
    else
        log_warn "autonomous-server.js –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É"
        echo "console.log('RTSP Server placeholder');" > autonomous-server.js
    fi
    
    if [ -f "../autonomous-rtsp-manager.js" ]; then
        cp ../autonomous-rtsp-manager.js ./
        log_info "autonomous-rtsp-manager.js —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
    else
        log_warn "autonomous-rtsp-manager.js –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É"
        echo "console.log('RTSP Manager placeholder');" > autonomous-rtsp-manager.js
    fi
    
    if [ -f "../index.html" ]; then
        cp ../index.html ./
        log_info "index.html —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
    else
        log_warn "index.html –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
        cat > index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>RTSP Monitor</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        h1 { color: #2c3e50; }
    </style>
</head>
<body>
    <h1>üé• RTSP Monitor</h1>
    <p>–°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞</p>
    <p>–ü–æ—Ä—Ç: 3000</p>
</body>
</html>
EOF
    fi
    
    # –ö–æ–ø–∏—Ä—É–µ–º FFmpeg –µ—Å–ª–∏ –µ—Å—Ç—å
    if [ -d "../ffmpeg" ]; then
        cp -r ../ffmpeg ./
        log_info "FFmpeg –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"
    else
        log_warn "FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–≥–ª—É—à–µ–∫"
        mkdir -p ffmpeg/{win64,linux-x64,macos-x64,macos-arm64}
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        echo "#!/bin/bash" > ffmpeg/linux-x64/ffmpeg
        echo "echo 'FFmpeg placeholder'" >> ffmpeg/linux-x64/ffmpeg
        chmod +x ffmpeg/linux-x64/ffmpeg
        
        # Windows –∑–∞–≥–ª—É—à–∫–∞
        echo "@echo FFmpeg placeholder" > ffmpeg/win64/ffmpeg.exe
    fi
}

# 3. –°–æ–∑–¥–∞–Ω–∏–µ Electron main.js
create_electron_main() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ Electron main –ø—Ä–æ—Ü–µ—Å—Å–∞..."
    
    cat > electron-main.js << 'EOF'
const { app, BrowserWindow, Menu, Tray } = require('electron');
const { spawn } = require('child_process');
const path = require('path');
const os = require('os');

let mainWindow;
let serverProcess;
let tray;

function createWindow() {
    mainWindow = new BrowserWindow({
        width: 1400,
        height: 900,
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true,
            webSecurity: false
        },
        title: 'RTSP Monitor - –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è',
        show: false
    });

    // –ó–∞–ø—É—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    startServer();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        mainWindow.loadURL('http://localhost:3000');
        mainWindow.show();
    }, 3000);

    mainWindow.on('close', (event) => {
        if (!app.isQuiting) {
            event.preventDefault();
            mainWindow.hide();
        }
    });
}

function startServer() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
    
    const serverPath = path.join(__dirname, 'autonomous-server.js');
    serverProcess = spawn('node', [serverPath], {
        stdio: 'pipe',
        env: {
            ...process.env,
            PORT: '3000',
            NODE_ENV: 'production'
        }
    });

    serverProcess.stdout.on('data', (data) => {
        console.log('Server:', data.toString().trim());
    });

    serverProcess.stderr.on('data', (data) => {
        console.error('Server Error:', data.toString().trim());
    });
}

function createTray() {
    // –ü—Ä–æ—Å—Ç–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è —Ç—Ä–µ—è (–µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –∏–∫–æ–Ω–∫–∏)
    tray = new Tray(path.join(__dirname, 'assets/tray.png'));
    
    const contextMenu = Menu.buildFromTemplate([
        {
            label: '–ü–æ–∫–∞–∑–∞—Ç—å RTSP Monitor',
            click: () => {
                mainWindow.show();
            }
        },
        {
            label: '–í—ã—Ö–æ–¥',
            click: () => {
                app.isQuiting = true;
                if (serverProcess) {
                    serverProcess.kill();
                }
                app.quit();
            }
        }
    ]);

    tray.setContextMenu(contextMenu);
    tray.setToolTip('RTSP Monitor');
}

app.whenReady().then(() => {
    createWindow();
    createTray();
});

app.on('window-all-closed', () => {
    // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ —Ç—Ä–µ–µ
});

app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

console.log('üöÄ RTSP Monitor Electron –∑–∞–ø—É—â–µ–Ω');
EOF

    log_info "electron-main.js —Å–æ–∑–¥–∞–Ω"
}

# 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json –¥–ª—è Electron
update_package_json() {
    log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ package.json..."
    
    cat > package.json << 'EOF'
{
  "name": "rtsp-monitor-electron",
  "version": "1.0.0",
  "description": "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è",
  "main": "electron-main.js",
  "scripts": {
    "start": "electron .",
    "dev": "NODE_ENV=development electron .",
    "build": "./node_modules/.bin/electron-builder",
    "build:win": "./node_modules/.bin/electron-builder --win",
    "build:linux": "./node_modules/.bin/electron-builder --linux",
    "build:mac": "./node_modules/.bin/electron-builder --mac",
    "dist": "./node_modules/.bin/electron-builder --publish=never",
    "clean": "rimraf dist build installers node_modules/.cache"
  },
  "devDependencies": {
    "electron": "^27.1.3",
    "electron-builder": "^24.8.1",
    "rimraf": "^5.0.5"
  },
  "build": {
    "appId": "com.rtspmonitor.app",
    "productName": "RTSP Monitor",
    "directories": {
      "output": "installers"
    },
    "files": [
      "electron-main.js",
      "autonomous-server.js",
      "autonomous-rtsp-manager.js",
      "index.html",
      "ffmpeg/**/*",
      "assets/**/*"
    ],
    "extraResources": [
      {
        "from": "ffmpeg",
        "to": "ffmpeg",
        "filter": ["**/*"]
      }
    ],
    "win": {
      "target": [
        {
          "target": "nsis",
          "arch": ["x64"]
        },
        {
          "target": "portable", 
          "arch": ["x64"]
        }
      ],
      "artifactName": "${productName}-${version}-Windows.${ext}"
    },
    "linux": {
      "target": [
        {
          "target": "AppImage",
          "arch": ["x64"]
        },
        {
          "target": "deb",
          "arch": ["x64"]
        }
      ],
      "artifactName": "${productName}-${version}-Linux.${ext}",
      "category": "Network"
    },
    "mac": {
      "target": [
        {
          "target": "dmg",
          "arch": ["x64", "arm64"]
        }
      ],
      "artifactName": "${productName}-${version}-macOS.${ext}"
    }
  }
}
EOF

    log_info "package.json –æ–±–Ω–æ–≤–ª–µ–Ω"
}

# 5. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
create_simple_assets() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
    
    mkdir -p assets
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∏–∫–æ–Ω–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    cat > assets/tray.png.txt << 'EOF'
# –ü—Ä–æ—Å—Ç–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏–∫–æ–Ω–∫–∞
# –í production –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â—É—é PNG –∏–∫–æ–Ω–∫—É 16x16
RTSP
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ README
    cat > README.md << 'EOF'
# RTSP Monitor Electron

–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RTSP –ø–æ—Ç–æ–∫–æ–≤.

## –ó–∞–ø—É—Å–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
```bash
npm start
```

## –°–±–æ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–≤
```bash
npm run build:win     # Windows
npm run build:linux   # Linux  
npm run build:mac     # macOS
```

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞
- electron-main.js - –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å Electron
- autonomous-server.js - Node.js —Å–µ—Ä–≤–µ—Ä
- index.html - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
- ffmpeg/ - –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
EOF

    log_info "–†–µ—Å—É—Ä—Å—ã —Å–æ–∑–¥–∞–Ω—ã"
}

# 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
test_local_setup() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Electron —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
    if [ -f "node_modules/.bin/electron" ]; then
        log_info "Electron —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: $(./node_modules/.bin/electron --version)"
    else
        log_error "Electron –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ node_modules"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ electron-builder
    if [ -f "node_modules/.bin/electron-builder" ]; then
        log_info "electron-builder —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ"
    else
        log_error "electron-builder –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for file in electron-main.js autonomous-server.js index.html; do
        if [ -f "$file" ]; then
            log_info "‚úÖ $file –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        else
            log_warn "‚ö†Ô∏è  $file –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        fi
    done
    
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
}

# 7. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–±–æ—Ä–∫–∏
create_build_scripts() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–±–æ—Ä–∫–∏..."
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è Windows
    cat > build-windows.sh << 'EOF'
#!/bin/bash
echo "ü™ü –°–±–æ—Ä–∫–∞ –¥–ª—è Windows..."
./node_modules/.bin/electron-builder --win
echo "‚úÖ Windows —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "üìÅ –§–∞–π–ª—ã –≤: installers/"
ls -la installers/ | grep -E "\.(exe|msi)$" || echo "–ù–µ—Ç Windows —Ñ–∞–π–ª–æ–≤"
EOF
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è Linux
    cat > build-linux.sh << 'EOF'
#!/bin/bash
echo "üêß –°–±–æ—Ä–∫–∞ –¥–ª—è Linux..."
./node_modules/.bin/electron-builder --linux
echo "‚úÖ Linux —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "üìÅ –§–∞–π–ª—ã –≤: installers/"
ls -la installers/ | grep -E "\.(deb|rpm|AppImage)$" || echo "–ù–µ—Ç Linux —Ñ–∞–π–ª–æ–≤"
EOF
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    cat > build-all.sh << 'EOF'
#!/bin/bash
echo "üåç –°–±–æ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º..."
./node_modules/.bin/electron-builder --win --linux --mac
echo "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
if [ -d "installers" ]; then
    ls -lah installers/
else
    echo "–ü–∞–ø–∫–∞ installers –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
fi
EOF
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
    chmod +x build-windows.sh build-linux.sh build-all.sh
    
    log_info "–°–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üéØ –¶–µ–ª—å: –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ sudo –ø—Ä–∞–≤"
    echo ""
    
    setup_local_project
    create_project_files
    create_electron_main
    update_package_json
    create_simple_assets
    create_build_scripts
    test_local_setup
    
    echo ""
    log_info "üéâ –õ–æ–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "  1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: npm start"
    echo "  2. –°–±–æ—Ä–∫–∞ Windows: ./build-windows.sh"
    echo "  3. –°–±–æ—Ä–∫–∞ Linux: ./build-linux.sh" 
    echo "  4. –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö: ./build-all.sh"
    echo ""
    echo "üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ: $(pwd)"
    echo "üöÄ –ì–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!"
}

# –ó–∞–ø—É—Å–∫
main

# –ü–æ–∫–∞–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
echo ""
log_info "üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:"
find . -maxdepth 2 -type f -name "*.js" -o -name "*.json" -o -name "*.html" -o -name "*.sh" | sort
EOF
